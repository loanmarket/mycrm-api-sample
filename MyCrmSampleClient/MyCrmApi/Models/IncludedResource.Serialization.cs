// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    public partial class IncludedResource : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("type");
            writer.WriteStringValue(Type);
            if (Optional.IsDefined(Id))
            {
                if (Id != null)
                {
                    writer.WritePropertyName("id");
                    writer.WriteStringValue(Id);
                }
                else
                {
                    writer.WriteNull("id");
                }
            }
            writer.WriteEndObject();
        }

        internal static IncludedResource DeserializeIncludedResource(JsonElement element)
        {
            if (element.TryGetProperty("type", out JsonElement discriminator))
            {
                switch (discriminator.GetString())
                {
                    case "adviser-address": return AdviserAddress.DeserializeAdviserAddress(element);
                    case "adviser-details": return AdviserDetail.DeserializeAdviserDetail(element);
                    case "agreement-holders": return AgreementHolder.DeserializeAgreementHolder(element);
                    case "asset-categories": return AssetCategory.DeserializeAssetCategory(element);
                    case "asset-sub-types": return AssetSubType.DeserializeAssetSubType(element);
                    case "asset-types": return AssetType.DeserializeAssetType(element);
                    case "assets": return Asset.DeserializeAsset(element);
                    case "business": return Business.DeserializeBusiness(element);
                    case "contact-address": return ContactAddress.DeserializeContactAddress(element);
                    case "contact-external-references": return ContactExternalReference.DeserializeContactExternalReference(element);
                    case "contact-groups": return ContactGroup.DeserializeContactGroup(element);
                    case "contact-marketing": return ContactMarketing.DeserializeContactMarketing(element);
                    case "contacts": return Contact.DeserializeContact(element);
                    case "deal-external-references": return DealExternalReference.DeserializeDealExternalReference(element);
                    case "deal-important-dates": return DealImportantDate.DeserializeDealImportantDate(element);
                    case "deal-notes": return DealNote.DeserializeDealNote(element);
                    case "deal-participants": return DealParticipant.DeserializeDealParticipant(element);
                    case "deal-scenario": return DealScenario.DeserializeDealScenario(element);
                    case "deal-securities": return DealSecurity.DeserializeDealSecurity(element);
                    case "deal-security-ownership": return DealSecurityOwnership.DeserializeDealSecurityOwnership(element);
                    case "deal-security-title-identity": return DealSecurityTitleIdentity.DeserializeDealSecurityTitleIdentity(element);
                    case "deal-structure-important-dates": return DealStructureImportantDate.DeserializeDealStructureImportantDate(element);
                    case "deal-structures": return DealStructure.DeserializeDealStructure(element);
                    case "deals": return Deal.DeserializeDeal(element);
                    case "enquiry-source": return EnquirySource.DeserializeEnquirySource(element);
                    case "expense-categories": return ExpenseCategory.DeserializeExpenseCategory(element);
                    case "expense-types": return ExpenseType.DeserializeExpenseType(element);
                    case "expenses": return Expense.DeserializeExpense(element);
                    case "financial-address": return FinancialAddress.DeserializeFinancialAddress(element);
                    case "financials": return Financial.DeserializeFinancial(element);
                    case "high-level-summary": return HighLevelSummary.DeserializeHighLevelSummary(element);
                    case "income-categories": return IncomeCategory.DeserializeIncomeCategory(element);
                    case "income-types": return IncomeType.DeserializeIncomeType(element);
                    case "incomes": return Income.DeserializeIncome(element);
                    case "integrations": return Integration.DeserializeIntegration(element);
                    case "leads": return Lead.DeserializeLead(element);
                    case "liabilities": return Liability.DeserializeLiability(element);
                    case "liability-categories": return LiabilityCategory.DeserializeLiabilityCategory(element);
                    case "liability-types": return LiabilityType.DeserializeLiabilityType(element);
                    case "organisation-addresses": return OrganisationAddress.DeserializeOrganisationAddress(element);
                    case "organisations": return Organisation.DeserializeOrganisation(element);
                    case "owners": return Owner.DeserializeOwner(element);
                    case "property-types": return PropertyType.DeserializePropertyType(element);
                    case "referrer-members": return ReferrerMember.DeserializeReferrerMember(element);
                    case "referrer-organisation": return ReferrerOrganisation.DeserializeReferrerOrganisation(element);
                    case "referrers": return Referrer.DeserializeReferrer(element);
                    case "structured-leads": return StructuredLead.DeserializeStructuredLead(element);
                    case "advisers": return Adviser.DeserializeAdviser(element);
                }
            }
            string type = default;
            Optional<string> id = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        id = null;
                        continue;
                    }
                    id = property.Value.GetString();
                    continue;
                }
            }
            return new IncludedResource(type, id.Value);
        }
    }
}
