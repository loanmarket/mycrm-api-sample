// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The Title. </summary>
    internal readonly partial struct Title : IEquatable<Title>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Title"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Title(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MrValue = "Mr";
        private const string MrsValue = "Mrs";
        private const string MsValue = "Ms";
        private const string MissValue = "Miss";
        private const string MasterValue = "Master";
        private const string DrValue = "Dr";

        /// <summary> Mr. </summary>
        public static Title Mr { get; } = new Title(MrValue);
        /// <summary> Mrs. </summary>
        public static Title Mrs { get; } = new Title(MrsValue);
        /// <summary> Ms. </summary>
        public static Title Ms { get; } = new Title(MsValue);
        /// <summary> Miss. </summary>
        public static Title Miss { get; } = new Title(MissValue);
        /// <summary> Master. </summary>
        public static Title Master { get; } = new Title(MasterValue);
        /// <summary> Dr. </summary>
        public static Title Dr { get; } = new Title(DrValue);
        /// <summary> Determines if two <see cref="Title"/> values are the same. </summary>
        public static bool operator ==(Title left, Title right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Title"/> values are not the same. </summary>
        public static bool operator !=(Title left, Title right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Title"/>. </summary>
        public static implicit operator Title(string value) => new Title(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Title other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Title other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
