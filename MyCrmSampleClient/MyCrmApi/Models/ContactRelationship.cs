// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ContactRelationship. </summary>
    public readonly partial struct ContactRelationship : IEquatable<ContactRelationship>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ContactRelationship"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactRelationship(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ContactGroupValue = "contactGroup";
        private const string ContactAddressValue = "contactAddress";
        private const string ExternalReferencesValue = "externalReferences";
        private const string DealsValue = "deals";

        /// <summary> contactGroup. </summary>
        public static ContactRelationship ContactGroup { get; } = new ContactRelationship(ContactGroupValue);
        /// <summary> contactAddress. </summary>
        public static ContactRelationship ContactAddress { get; } = new ContactRelationship(ContactAddressValue);
        /// <summary> externalReferences. </summary>
        public static ContactRelationship ExternalReferences { get; } = new ContactRelationship(ExternalReferencesValue);
        /// <summary> deals. </summary>
        public static ContactRelationship Deals { get; } = new ContactRelationship(DealsValue);
        /// <summary> Determines if two <see cref="ContactRelationship"/> values are the same. </summary>
        public static bool operator ==(ContactRelationship left, ContactRelationship right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactRelationship"/> values are not the same. </summary>
        public static bool operator !=(ContactRelationship left, ContactRelationship right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactRelationship"/>. </summary>
        public static implicit operator ContactRelationship(string value) => new ContactRelationship(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactRelationship other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactRelationship other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
