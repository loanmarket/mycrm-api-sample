// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ContactAccessType. </summary>
    internal readonly partial struct ContactAccessType : IEquatable<ContactAccessType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContactAccessType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactAccessType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OtherValue = "Other";
        private const string LoanPartyValue = "LoanParty";

        /// <summary> Other. </summary>
        public static ContactAccessType Other { get; } = new ContactAccessType(OtherValue);
        /// <summary> LoanParty. </summary>
        public static ContactAccessType LoanParty { get; } = new ContactAccessType(LoanPartyValue);
        /// <summary> Determines if two <see cref="ContactAccessType"/> values are the same. </summary>
        public static bool operator ==(ContactAccessType left, ContactAccessType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactAccessType"/> values are not the same. </summary>
        public static bool operator !=(ContactAccessType left, ContactAccessType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactAccessType"/>. </summary>
        public static implicit operator ContactAccessType(string value) => new ContactAccessType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactAccessType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactAccessType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
