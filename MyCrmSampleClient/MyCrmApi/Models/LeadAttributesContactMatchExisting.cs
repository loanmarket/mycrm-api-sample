// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The LeadAttributesContactMatchExisting. </summary>
    public readonly partial struct LeadAttributesContactMatchExisting : IEquatable<LeadAttributesContactMatchExisting>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LeadAttributesContactMatchExisting"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LeadAttributesContactMatchExisting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EmailValue = "Email";
        private const string EmailMobileValue = "EmailMobile";
        private const string EmailNameValue = "EmailName";
        private const string EmailMobileNameValue = "EmailMobileName";
        private const string EmailDateOfBirthValue = "EmailDateOfBirth";
        private const string EmailDateOfBirthNameValue = "EmailDateOfBirthName";

        /// <summary> Email. </summary>
        public static LeadAttributesContactMatchExisting Email { get; } = new LeadAttributesContactMatchExisting(EmailValue);
        /// <summary> EmailMobile. </summary>
        public static LeadAttributesContactMatchExisting EmailMobile { get; } = new LeadAttributesContactMatchExisting(EmailMobileValue);
        /// <summary> EmailName. </summary>
        public static LeadAttributesContactMatchExisting EmailName { get; } = new LeadAttributesContactMatchExisting(EmailNameValue);
        /// <summary> EmailMobileName. </summary>
        public static LeadAttributesContactMatchExisting EmailMobileName { get; } = new LeadAttributesContactMatchExisting(EmailMobileNameValue);
        /// <summary> EmailDateOfBirth. </summary>
        public static LeadAttributesContactMatchExisting EmailDateOfBirth { get; } = new LeadAttributesContactMatchExisting(EmailDateOfBirthValue);
        /// <summary> EmailDateOfBirthName. </summary>
        public static LeadAttributesContactMatchExisting EmailDateOfBirthName { get; } = new LeadAttributesContactMatchExisting(EmailDateOfBirthNameValue);
        /// <summary> Determines if two <see cref="LeadAttributesContactMatchExisting"/> values are the same. </summary>
        public static bool operator ==(LeadAttributesContactMatchExisting left, LeadAttributesContactMatchExisting right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LeadAttributesContactMatchExisting"/> values are not the same. </summary>
        public static bool operator !=(LeadAttributesContactMatchExisting left, LeadAttributesContactMatchExisting right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LeadAttributesContactMatchExisting"/>. </summary>
        public static implicit operator LeadAttributesContactMatchExisting(string value) => new LeadAttributesContactMatchExisting(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LeadAttributesContactMatchExisting other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LeadAttributesContactMatchExisting other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
