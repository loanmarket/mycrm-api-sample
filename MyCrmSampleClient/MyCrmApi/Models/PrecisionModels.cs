// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The PrecisionModels. </summary>
    internal readonly partial struct PrecisionModels : IEquatable<PrecisionModels>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PrecisionModels"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PrecisionModels(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FloatingValue = "Floating";
        private const string FloatingSingleValue = "FloatingSingle";
        private const string FixedValue = "Fixed";

        /// <summary> Floating. </summary>
        public static PrecisionModels Floating { get; } = new PrecisionModels(FloatingValue);
        /// <summary> FloatingSingle. </summary>
        public static PrecisionModels FloatingSingle { get; } = new PrecisionModels(FloatingSingleValue);
        /// <summary> Fixed. </summary>
        public static PrecisionModels Fixed { get; } = new PrecisionModels(FixedValue);
        /// <summary> Determines if two <see cref="PrecisionModels"/> values are the same. </summary>
        public static bool operator ==(PrecisionModels left, PrecisionModels right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PrecisionModels"/> values are not the same. </summary>
        public static bool operator !=(PrecisionModels left, PrecisionModels right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PrecisionModels"/>. </summary>
        public static implicit operator PrecisionModels(string value) => new PrecisionModels(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PrecisionModels other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PrecisionModels other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
