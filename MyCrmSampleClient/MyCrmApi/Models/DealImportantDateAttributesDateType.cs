// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The DealImportantDateAttributesDateType. </summary>
    public readonly partial struct DealImportantDateAttributesDateType : IEquatable<DealImportantDateAttributesDateType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DealImportantDateAttributesDateType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DealImportantDateAttributesDateType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SettledValue = "Settled";
        private const string FinanceClauseValue = "FinanceClause";
        private const string NotProceedingValue = "NotProceeding";
        private const string LodgedValue = "Lodged";
        private const string PreApprovedValue = "PreApproved";
        private const string ConditionallyApprovedValue = "ConditionallyApproved";
        private const string ApprovedValue = "Approved";
        private const string PreApprovedExpiryValue = "PreApprovedExpiry";
        private const string EstimatedSettledValue = "EstimatedSettled";

        /// <summary> Settled. </summary>
        public static DealImportantDateAttributesDateType Settled { get; } = new DealImportantDateAttributesDateType(SettledValue);
        /// <summary> FinanceClause. </summary>
        public static DealImportantDateAttributesDateType FinanceClause { get; } = new DealImportantDateAttributesDateType(FinanceClauseValue);
        /// <summary> NotProceeding. </summary>
        public static DealImportantDateAttributesDateType NotProceeding { get; } = new DealImportantDateAttributesDateType(NotProceedingValue);
        /// <summary> Lodged. </summary>
        public static DealImportantDateAttributesDateType Lodged { get; } = new DealImportantDateAttributesDateType(LodgedValue);
        /// <summary> PreApproved. </summary>
        public static DealImportantDateAttributesDateType PreApproved { get; } = new DealImportantDateAttributesDateType(PreApprovedValue);
        /// <summary> ConditionallyApproved. </summary>
        public static DealImportantDateAttributesDateType ConditionallyApproved { get; } = new DealImportantDateAttributesDateType(ConditionallyApprovedValue);
        /// <summary> Approved. </summary>
        public static DealImportantDateAttributesDateType Approved { get; } = new DealImportantDateAttributesDateType(ApprovedValue);
        /// <summary> PreApprovedExpiry. </summary>
        public static DealImportantDateAttributesDateType PreApprovedExpiry { get; } = new DealImportantDateAttributesDateType(PreApprovedExpiryValue);
        /// <summary> EstimatedSettled. </summary>
        public static DealImportantDateAttributesDateType EstimatedSettled { get; } = new DealImportantDateAttributesDateType(EstimatedSettledValue);
        /// <summary> Determines if two <see cref="DealImportantDateAttributesDateType"/> values are the same. </summary>
        public static bool operator ==(DealImportantDateAttributesDateType left, DealImportantDateAttributesDateType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DealImportantDateAttributesDateType"/> values are not the same. </summary>
        public static bool operator !=(DealImportantDateAttributesDateType left, DealImportantDateAttributesDateType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DealImportantDateAttributesDateType"/>. </summary>
        public static implicit operator DealImportantDateAttributesDateType(string value) => new DealImportantDateAttributesDateType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DealImportantDateAttributesDateType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DealImportantDateAttributesDateType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
