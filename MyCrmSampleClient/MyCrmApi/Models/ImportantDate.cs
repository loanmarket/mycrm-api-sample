// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ImportantDate. </summary>
    public readonly partial struct ImportantDate : IEquatable<ImportantDate>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ImportantDate"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImportantDate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SettlementDateValue = "SettlementDate";
        private const string LodgedDateValue = "LodgedDate";

        /// <summary> SettlementDate. </summary>
        public static ImportantDate SettlementDate { get; } = new ImportantDate(SettlementDateValue);
        /// <summary> LodgedDate. </summary>
        public static ImportantDate LodgedDate { get; } = new ImportantDate(LodgedDateValue);
        /// <summary> Determines if two <see cref="ImportantDate"/> values are the same. </summary>
        public static bool operator ==(ImportantDate left, ImportantDate right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImportantDate"/> values are not the same. </summary>
        public static bool operator !=(ImportantDate left, ImportantDate right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImportantDate"/>. </summary>
        public static implicit operator ImportantDate(string value) => new ImportantDate(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImportantDate other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImportantDate other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
