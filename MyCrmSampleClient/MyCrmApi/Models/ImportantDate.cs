// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ImportantDate. </summary>
    internal readonly partial struct ImportantDate : IEquatable<ImportantDate>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ImportantDate"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ImportantDate(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SettledValue = "Settled";
        private const string FinanceClauseValue = "FinanceClause";
        private const string NotProceedingValue = "NotProceeding";
        private const string LodgedValue = "Lodged";
        private const string PreApprovedValue = "PreApproved";
        private const string ConditionallyApprovedValue = "ConditionallyApproved";
        private const string ApprovedValue = "Approved";
        private const string PreApprovedExpiryValue = "PreApprovedExpiry";
        private const string EstimatedSettledValue = "EstimatedSettled";

        /// <summary> Settled. </summary>
        public static ImportantDate Settled { get; } = new ImportantDate(SettledValue);
        /// <summary> FinanceClause. </summary>
        public static ImportantDate FinanceClause { get; } = new ImportantDate(FinanceClauseValue);
        /// <summary> NotProceeding. </summary>
        public static ImportantDate NotProceeding { get; } = new ImportantDate(NotProceedingValue);
        /// <summary> Lodged. </summary>
        public static ImportantDate Lodged { get; } = new ImportantDate(LodgedValue);
        /// <summary> PreApproved. </summary>
        public static ImportantDate PreApproved { get; } = new ImportantDate(PreApprovedValue);
        /// <summary> ConditionallyApproved. </summary>
        public static ImportantDate ConditionallyApproved { get; } = new ImportantDate(ConditionallyApprovedValue);
        /// <summary> Approved. </summary>
        public static ImportantDate Approved { get; } = new ImportantDate(ApprovedValue);
        /// <summary> PreApprovedExpiry. </summary>
        public static ImportantDate PreApprovedExpiry { get; } = new ImportantDate(PreApprovedExpiryValue);
        /// <summary> EstimatedSettled. </summary>
        public static ImportantDate EstimatedSettled { get; } = new ImportantDate(EstimatedSettledValue);
        /// <summary> Determines if two <see cref="ImportantDate"/> values are the same. </summary>
        public static bool operator ==(ImportantDate left, ImportantDate right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ImportantDate"/> values are not the same. </summary>
        public static bool operator !=(ImportantDate left, ImportantDate right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ImportantDate"/>. </summary>
        public static implicit operator ImportantDate(string value) => new ImportantDate(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ImportantDate other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ImportantDate other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
