// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ExistingContactCheck. </summary>
    internal readonly partial struct ExistingContactCheck : IEquatable<ExistingContactCheck>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExistingContactCheck"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExistingContactCheck(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EmailValue = "Email";
        private const string EmailMobileValue = "EmailMobile";
        private const string EmailNameValue = "EmailName";
        private const string EmailMobileNameValue = "EmailMobileName";
        private const string EmailDateOfBirthValue = "EmailDateOfBirth";
        private const string EmailDateOfBirthNameValue = "EmailDateOfBirthName";

        /// <summary> Email. </summary>
        public static ExistingContactCheck Email { get; } = new ExistingContactCheck(EmailValue);
        /// <summary> EmailMobile. </summary>
        public static ExistingContactCheck EmailMobile { get; } = new ExistingContactCheck(EmailMobileValue);
        /// <summary> EmailName. </summary>
        public static ExistingContactCheck EmailName { get; } = new ExistingContactCheck(EmailNameValue);
        /// <summary> EmailMobileName. </summary>
        public static ExistingContactCheck EmailMobileName { get; } = new ExistingContactCheck(EmailMobileNameValue);
        /// <summary> EmailDateOfBirth. </summary>
        public static ExistingContactCheck EmailDateOfBirth { get; } = new ExistingContactCheck(EmailDateOfBirthValue);
        /// <summary> EmailDateOfBirthName. </summary>
        public static ExistingContactCheck EmailDateOfBirthName { get; } = new ExistingContactCheck(EmailDateOfBirthNameValue);
        /// <summary> Determines if two <see cref="ExistingContactCheck"/> values are the same. </summary>
        public static bool operator ==(ExistingContactCheck left, ExistingContactCheck right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExistingContactCheck"/> values are not the same. </summary>
        public static bool operator !=(ExistingContactCheck left, ExistingContactCheck right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExistingContactCheck"/>. </summary>
        public static implicit operator ExistingContactCheck(string value) => new ExistingContactCheck(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExistingContactCheck other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExistingContactCheck other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
