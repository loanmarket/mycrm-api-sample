// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The SystemStatus. </summary>
    internal readonly partial struct SystemStatus : IEquatable<SystemStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SystemStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SystemStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NewLeadsValue = "NewLeads";
        private const string ResearchingValue = "Researching";
        private const string PreApprovedValue = "PreApproved";
        private const string ConditionallyApprovedValue = "ConditionallyApproved";
        private const string UnconditionallyApprovedValue = "UnconditionallyApproved";
        private const string LodgedValue = "Lodged";
        private const string InProgressValue = "InProgress";
        private const string PendingSettlementValue = "PendingSettlement";
        private const string VariedValue = "Varied";
        private const string RepaidValue = "Repaid";
        private const string WithdrawnValue = "Withdrawn";
        private const string CancelledValue = "Cancelled";
        private const string SettledValue = "Settled";

        /// <summary> NewLeads. </summary>
        public static SystemStatus NewLeads { get; } = new SystemStatus(NewLeadsValue);
        /// <summary> Researching. </summary>
        public static SystemStatus Researching { get; } = new SystemStatus(ResearchingValue);
        /// <summary> PreApproved. </summary>
        public static SystemStatus PreApproved { get; } = new SystemStatus(PreApprovedValue);
        /// <summary> ConditionallyApproved. </summary>
        public static SystemStatus ConditionallyApproved { get; } = new SystemStatus(ConditionallyApprovedValue);
        /// <summary> UnconditionallyApproved. </summary>
        public static SystemStatus UnconditionallyApproved { get; } = new SystemStatus(UnconditionallyApprovedValue);
        /// <summary> Lodged. </summary>
        public static SystemStatus Lodged { get; } = new SystemStatus(LodgedValue);
        /// <summary> InProgress. </summary>
        public static SystemStatus InProgress { get; } = new SystemStatus(InProgressValue);
        /// <summary> PendingSettlement. </summary>
        public static SystemStatus PendingSettlement { get; } = new SystemStatus(PendingSettlementValue);
        /// <summary> Varied. </summary>
        public static SystemStatus Varied { get; } = new SystemStatus(VariedValue);
        /// <summary> Repaid. </summary>
        public static SystemStatus Repaid { get; } = new SystemStatus(RepaidValue);
        /// <summary> Withdrawn. </summary>
        public static SystemStatus Withdrawn { get; } = new SystemStatus(WithdrawnValue);
        /// <summary> Cancelled. </summary>
        public static SystemStatus Cancelled { get; } = new SystemStatus(CancelledValue);
        /// <summary> Settled. </summary>
        public static SystemStatus Settled { get; } = new SystemStatus(SettledValue);
        /// <summary> Determines if two <see cref="SystemStatus"/> values are the same. </summary>
        public static bool operator ==(SystemStatus left, SystemStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SystemStatus"/> values are not the same. </summary>
        public static bool operator !=(SystemStatus left, SystemStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SystemStatus"/>. </summary>
        public static implicit operator SystemStatus(string value) => new SystemStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SystemStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SystemStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
