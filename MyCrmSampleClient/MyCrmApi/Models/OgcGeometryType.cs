// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The OgcGeometryType. </summary>
    internal readonly partial struct OgcGeometryType : IEquatable<OgcGeometryType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OgcGeometryType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OgcGeometryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PointValue = "Point";
        private const string LineStringValue = "LineString";
        private const string PolygonValue = "Polygon";
        private const string MultiPointValue = "MultiPoint";
        private const string MultiLineStringValue = "MultiLineString";
        private const string MultiPolygonValue = "MultiPolygon";
        private const string GeometryCollectionValue = "GeometryCollection";
        private const string CircularStringValue = "CircularString";
        private const string CompoundCurveValue = "CompoundCurve";
        private const string CurvePolygonValue = "CurvePolygon";
        private const string MultiCurveValue = "MultiCurve";
        private const string MultiSurfaceValue = "MultiSurface";
        private const string CurveValue = "Curve";
        private const string SurfaceValue = "Surface";
        private const string PolyhedralSurfaceValue = "PolyhedralSurface";
        private const string TINValue = "TIN";

        /// <summary> Point. </summary>
        public static OgcGeometryType Point { get; } = new OgcGeometryType(PointValue);
        /// <summary> LineString. </summary>
        public static OgcGeometryType LineString { get; } = new OgcGeometryType(LineStringValue);
        /// <summary> Polygon. </summary>
        public static OgcGeometryType Polygon { get; } = new OgcGeometryType(PolygonValue);
        /// <summary> MultiPoint. </summary>
        public static OgcGeometryType MultiPoint { get; } = new OgcGeometryType(MultiPointValue);
        /// <summary> MultiLineString. </summary>
        public static OgcGeometryType MultiLineString { get; } = new OgcGeometryType(MultiLineStringValue);
        /// <summary> MultiPolygon. </summary>
        public static OgcGeometryType MultiPolygon { get; } = new OgcGeometryType(MultiPolygonValue);
        /// <summary> GeometryCollection. </summary>
        public static OgcGeometryType GeometryCollection { get; } = new OgcGeometryType(GeometryCollectionValue);
        /// <summary> CircularString. </summary>
        public static OgcGeometryType CircularString { get; } = new OgcGeometryType(CircularStringValue);
        /// <summary> CompoundCurve. </summary>
        public static OgcGeometryType CompoundCurve { get; } = new OgcGeometryType(CompoundCurveValue);
        /// <summary> CurvePolygon. </summary>
        public static OgcGeometryType CurvePolygon { get; } = new OgcGeometryType(CurvePolygonValue);
        /// <summary> MultiCurve. </summary>
        public static OgcGeometryType MultiCurve { get; } = new OgcGeometryType(MultiCurveValue);
        /// <summary> MultiSurface. </summary>
        public static OgcGeometryType MultiSurface { get; } = new OgcGeometryType(MultiSurfaceValue);
        /// <summary> Curve. </summary>
        public static OgcGeometryType Curve { get; } = new OgcGeometryType(CurveValue);
        /// <summary> Surface. </summary>
        public static OgcGeometryType Surface { get; } = new OgcGeometryType(SurfaceValue);
        /// <summary> PolyhedralSurface. </summary>
        public static OgcGeometryType PolyhedralSurface { get; } = new OgcGeometryType(PolyhedralSurfaceValue);
        /// <summary> TIN. </summary>
        public static OgcGeometryType TIN { get; } = new OgcGeometryType(TINValue);
        /// <summary> Determines if two <see cref="OgcGeometryType"/> values are the same. </summary>
        public static bool operator ==(OgcGeometryType left, OgcGeometryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OgcGeometryType"/> values are not the same. </summary>
        public static bool operator !=(OgcGeometryType left, OgcGeometryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OgcGeometryType"/>. </summary>
        public static implicit operator OgcGeometryType(string value) => new OgcGeometryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OgcGeometryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OgcGeometryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
