// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The MaritalStatus. </summary>
    public readonly partial struct MaritalStatus : IEquatable<MaritalStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MaritalStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MaritalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SingleValue = "Single";
        private const string MarriedValue = "Married";
        private const string DeFactoValue = "DeFacto";
        private const string SeparatedValue = "Separated";
        private const string DivorcedValue = "Divorced";
        private const string WidowedValue = "Widowed";

        /// <summary> Single. </summary>
        public static MaritalStatus Single { get; } = new MaritalStatus(SingleValue);
        /// <summary> Married. </summary>
        public static MaritalStatus Married { get; } = new MaritalStatus(MarriedValue);
        /// <summary> DeFacto. </summary>
        public static MaritalStatus DeFacto { get; } = new MaritalStatus(DeFactoValue);
        /// <summary> Separated. </summary>
        public static MaritalStatus Separated { get; } = new MaritalStatus(SeparatedValue);
        /// <summary> Divorced. </summary>
        public static MaritalStatus Divorced { get; } = new MaritalStatus(DivorcedValue);
        /// <summary> Widowed. </summary>
        public static MaritalStatus Widowed { get; } = new MaritalStatus(WidowedValue);
        /// <summary> Determines if two <see cref="MaritalStatus"/> values are the same. </summary>
        public static bool operator ==(MaritalStatus left, MaritalStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MaritalStatus"/> values are not the same. </summary>
        public static bool operator !=(MaritalStatus left, MaritalStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MaritalStatus"/>. </summary>
        public static implicit operator MaritalStatus(string value) => new MaritalStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MaritalStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MaritalStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
