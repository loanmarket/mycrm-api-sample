// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The LeadAttributesDealStatus. </summary>
    public readonly partial struct LeadAttributesDealStatus : IEquatable<LeadAttributesDealStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LeadAttributesDealStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LeadAttributesDealStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NewLeadsValue = "NewLeads";
        private const string ResearchingValue = "Researching";
        private const string PreApprovedValue = "PreApproved";
        private const string ConditionallyApprovedValue = "ConditionallyApproved";
        private const string UnconditionallyApprovedValue = "UnconditionallyApproved";
        private const string LodgedValue = "Lodged";
        private const string InProgressValue = "InProgress";
        private const string PendingSettlementValue = "PendingSettlement";
        private const string VariedValue = "Varied";
        private const string RepaidValue = "Repaid";
        private const string WithdrawnValue = "Withdrawn";
        private const string CancelledValue = "Cancelled";
        private const string SettledValue = "Settled";

        /// <summary> NewLeads. </summary>
        public static LeadAttributesDealStatus NewLeads { get; } = new LeadAttributesDealStatus(NewLeadsValue);
        /// <summary> Researching. </summary>
        public static LeadAttributesDealStatus Researching { get; } = new LeadAttributesDealStatus(ResearchingValue);
        /// <summary> PreApproved. </summary>
        public static LeadAttributesDealStatus PreApproved { get; } = new LeadAttributesDealStatus(PreApprovedValue);
        /// <summary> ConditionallyApproved. </summary>
        public static LeadAttributesDealStatus ConditionallyApproved { get; } = new LeadAttributesDealStatus(ConditionallyApprovedValue);
        /// <summary> UnconditionallyApproved. </summary>
        public static LeadAttributesDealStatus UnconditionallyApproved { get; } = new LeadAttributesDealStatus(UnconditionallyApprovedValue);
        /// <summary> Lodged. </summary>
        public static LeadAttributesDealStatus Lodged { get; } = new LeadAttributesDealStatus(LodgedValue);
        /// <summary> InProgress. </summary>
        public static LeadAttributesDealStatus InProgress { get; } = new LeadAttributesDealStatus(InProgressValue);
        /// <summary> PendingSettlement. </summary>
        public static LeadAttributesDealStatus PendingSettlement { get; } = new LeadAttributesDealStatus(PendingSettlementValue);
        /// <summary> Varied. </summary>
        public static LeadAttributesDealStatus Varied { get; } = new LeadAttributesDealStatus(VariedValue);
        /// <summary> Repaid. </summary>
        public static LeadAttributesDealStatus Repaid { get; } = new LeadAttributesDealStatus(RepaidValue);
        /// <summary> Withdrawn. </summary>
        public static LeadAttributesDealStatus Withdrawn { get; } = new LeadAttributesDealStatus(WithdrawnValue);
        /// <summary> Cancelled. </summary>
        public static LeadAttributesDealStatus Cancelled { get; } = new LeadAttributesDealStatus(CancelledValue);
        /// <summary> Settled. </summary>
        public static LeadAttributesDealStatus Settled { get; } = new LeadAttributesDealStatus(SettledValue);
        /// <summary> Determines if two <see cref="LeadAttributesDealStatus"/> values are the same. </summary>
        public static bool operator ==(LeadAttributesDealStatus left, LeadAttributesDealStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LeadAttributesDealStatus"/> values are not the same. </summary>
        public static bool operator !=(LeadAttributesDealStatus left, LeadAttributesDealStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LeadAttributesDealStatus"/>. </summary>
        public static implicit operator LeadAttributesDealStatus(string value) => new LeadAttributesDealStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LeadAttributesDealStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LeadAttributesDealStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
