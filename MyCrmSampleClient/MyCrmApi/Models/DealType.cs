// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The DealType. </summary>
    internal readonly partial struct DealType : IEquatable<DealType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DealType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DealType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ResidentialValue = "Residential";
        private const string CommercialValue = "Commercial";
        private const string SmallBusinessValue = "SmallBusiness";
        private const string AssetFinanceValue = "AssetFinance";
        private const string PersonalLoanValue = "PersonalLoan";
        private const string DepositBondValue = "DepositBond";

        /// <summary> Residential. </summary>
        public static DealType Residential { get; } = new DealType(ResidentialValue);
        /// <summary> Commercial. </summary>
        public static DealType Commercial { get; } = new DealType(CommercialValue);
        /// <summary> SmallBusiness. </summary>
        public static DealType SmallBusiness { get; } = new DealType(SmallBusinessValue);
        /// <summary> AssetFinance. </summary>
        public static DealType AssetFinance { get; } = new DealType(AssetFinanceValue);
        /// <summary> PersonalLoan. </summary>
        public static DealType PersonalLoan { get; } = new DealType(PersonalLoanValue);
        /// <summary> DepositBond. </summary>
        public static DealType DepositBond { get; } = new DealType(DepositBondValue);
        /// <summary> Determines if two <see cref="DealType"/> values are the same. </summary>
        public static bool operator ==(DealType left, DealType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DealType"/> values are not the same. </summary>
        public static bool operator !=(DealType left, DealType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DealType"/>. </summary>
        public static implicit operator DealType(string value) => new DealType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DealType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DealType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
