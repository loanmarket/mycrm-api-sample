// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    public partial class ImportantDatesSet : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Settled))
            {
                if (Settled != null)
                {
                    writer.WritePropertyName("settled");
                    writer.WriteStringValue(Settled.Value, "D");
                }
                else
                {
                    writer.WriteNull("settled");
                }
            }
            if (Optional.IsDefined(Lodged))
            {
                if (Lodged != null)
                {
                    writer.WritePropertyName("lodged");
                    writer.WriteStringValue(Lodged.Value, "D");
                }
                else
                {
                    writer.WriteNull("lodged");
                }
            }
            if (Optional.IsDefined(FinanceClause))
            {
                if (FinanceClause != null)
                {
                    writer.WritePropertyName("financeClause");
                    writer.WriteStringValue(FinanceClause.Value, "D");
                }
                else
                {
                    writer.WriteNull("financeClause");
                }
            }
            if (Optional.IsDefined(NotProceeding))
            {
                if (NotProceeding != null)
                {
                    writer.WritePropertyName("notProceeding");
                    writer.WriteStringValue(NotProceeding.Value, "D");
                }
                else
                {
                    writer.WriteNull("notProceeding");
                }
            }
            if (Optional.IsDefined(Approved))
            {
                if (Approved != null)
                {
                    writer.WritePropertyName("approved");
                    writer.WriteStringValue(Approved.Value, "D");
                }
                else
                {
                    writer.WriteNull("approved");
                }
            }
            if (Optional.IsDefined(PreApproved))
            {
                if (PreApproved != null)
                {
                    writer.WritePropertyName("preApproved");
                    writer.WriteStringValue(PreApproved.Value, "D");
                }
                else
                {
                    writer.WriteNull("preApproved");
                }
            }
            if (Optional.IsDefined(ConditionallyApproved))
            {
                if (ConditionallyApproved != null)
                {
                    writer.WritePropertyName("conditionallyApproved");
                    writer.WriteStringValue(ConditionallyApproved.Value, "D");
                }
                else
                {
                    writer.WriteNull("conditionallyApproved");
                }
            }
            if (Optional.IsDefined(PreApprovedExpiry))
            {
                if (PreApprovedExpiry != null)
                {
                    writer.WritePropertyName("preApprovedExpiry");
                    writer.WriteStringValue(PreApprovedExpiry.Value, "D");
                }
                else
                {
                    writer.WriteNull("preApprovedExpiry");
                }
            }
            if (Optional.IsDefined(EstimatedSettled))
            {
                if (EstimatedSettled != null)
                {
                    writer.WritePropertyName("estimatedSettled");
                    writer.WriteStringValue(EstimatedSettled.Value, "D");
                }
                else
                {
                    writer.WriteNull("estimatedSettled");
                }
            }
            writer.WriteEndObject();
        }

        internal static ImportantDatesSet DeserializeImportantDatesSet(JsonElement element)
        {
            Optional<DateTimeOffset?> settled = default;
            Optional<DateTimeOffset?> lodged = default;
            Optional<DateTimeOffset?> financeClause = default;
            Optional<DateTimeOffset?> notProceeding = default;
            Optional<DateTimeOffset?> approved = default;
            Optional<DateTimeOffset?> preApproved = default;
            Optional<DateTimeOffset?> conditionallyApproved = default;
            Optional<DateTimeOffset?> preApprovedExpiry = default;
            Optional<DateTimeOffset?> estimatedSettled = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("settled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        settled = null;
                        continue;
                    }
                    settled = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("lodged"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lodged = null;
                        continue;
                    }
                    lodged = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("financeClause"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        financeClause = null;
                        continue;
                    }
                    financeClause = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("notProceeding"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        notProceeding = null;
                        continue;
                    }
                    notProceeding = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("approved"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        approved = null;
                        continue;
                    }
                    approved = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("preApproved"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preApproved = null;
                        continue;
                    }
                    preApproved = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("conditionallyApproved"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        conditionallyApproved = null;
                        continue;
                    }
                    conditionallyApproved = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("preApprovedExpiry"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        preApprovedExpiry = null;
                        continue;
                    }
                    preApprovedExpiry = property.Value.GetDateTimeOffset("D");
                    continue;
                }
                if (property.NameEquals("estimatedSettled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        estimatedSettled = null;
                        continue;
                    }
                    estimatedSettled = property.Value.GetDateTimeOffset("D");
                    continue;
                }
            }
            return new ImportantDatesSet(Optional.ToNullable(settled), Optional.ToNullable(lodged), Optional.ToNullable(financeClause), Optional.ToNullable(notProceeding), Optional.ToNullable(approved), Optional.ToNullable(preApproved), Optional.ToNullable(conditionallyApproved), Optional.ToNullable(preApprovedExpiry), Optional.ToNullable(estimatedSettled));
        }
    }
}
