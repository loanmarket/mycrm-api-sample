// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The ContactAttributesMaritalStatus. </summary>
    public readonly partial struct ContactAttributesMaritalStatus : IEquatable<ContactAttributesMaritalStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ContactAttributesMaritalStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ContactAttributesMaritalStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SingleValue = "Single";
        private const string MarriedValue = "Married";
        private const string DeFactoValue = "DeFacto";
        private const string SeparatedValue = "Separated";
        private const string DivorcedValue = "Divorced";
        private const string WidowedValue = "Widowed";

        /// <summary> Single. </summary>
        public static ContactAttributesMaritalStatus Single { get; } = new ContactAttributesMaritalStatus(SingleValue);
        /// <summary> Married. </summary>
        public static ContactAttributesMaritalStatus Married { get; } = new ContactAttributesMaritalStatus(MarriedValue);
        /// <summary> DeFacto. </summary>
        public static ContactAttributesMaritalStatus DeFacto { get; } = new ContactAttributesMaritalStatus(DeFactoValue);
        /// <summary> Separated. </summary>
        public static ContactAttributesMaritalStatus Separated { get; } = new ContactAttributesMaritalStatus(SeparatedValue);
        /// <summary> Divorced. </summary>
        public static ContactAttributesMaritalStatus Divorced { get; } = new ContactAttributesMaritalStatus(DivorcedValue);
        /// <summary> Widowed. </summary>
        public static ContactAttributesMaritalStatus Widowed { get; } = new ContactAttributesMaritalStatus(WidowedValue);
        /// <summary> Determines if two <see cref="ContactAttributesMaritalStatus"/> values are the same. </summary>
        public static bool operator ==(ContactAttributesMaritalStatus left, ContactAttributesMaritalStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ContactAttributesMaritalStatus"/> values are not the same. </summary>
        public static bool operator !=(ContactAttributesMaritalStatus left, ContactAttributesMaritalStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ContactAttributesMaritalStatus"/>. </summary>
        public static implicit operator ContactAttributesMaritalStatus(string value) => new ContactAttributesMaritalStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ContactAttributesMaritalStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ContactAttributesMaritalStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
