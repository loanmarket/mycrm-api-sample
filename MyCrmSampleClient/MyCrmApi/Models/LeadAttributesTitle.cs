// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> The LeadAttributesTitle. </summary>
    public readonly partial struct LeadAttributesTitle : IEquatable<LeadAttributesTitle>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LeadAttributesTitle"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LeadAttributesTitle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MrValue = "Mr";
        private const string MrsValue = "Mrs";
        private const string MsValue = "Ms";
        private const string MissValue = "Miss";
        private const string MasterValue = "Master";
        private const string DrValue = "Dr";

        /// <summary> Mr. </summary>
        public static LeadAttributesTitle Mr { get; } = new LeadAttributesTitle(MrValue);
        /// <summary> Mrs. </summary>
        public static LeadAttributesTitle Mrs { get; } = new LeadAttributesTitle(MrsValue);
        /// <summary> Ms. </summary>
        public static LeadAttributesTitle Ms { get; } = new LeadAttributesTitle(MsValue);
        /// <summary> Miss. </summary>
        public static LeadAttributesTitle Miss { get; } = new LeadAttributesTitle(MissValue);
        /// <summary> Master. </summary>
        public static LeadAttributesTitle Master { get; } = new LeadAttributesTitle(MasterValue);
        /// <summary> Dr. </summary>
        public static LeadAttributesTitle Dr { get; } = new LeadAttributesTitle(DrValue);
        /// <summary> Determines if two <see cref="LeadAttributesTitle"/> values are the same. </summary>
        public static bool operator ==(LeadAttributesTitle left, LeadAttributesTitle right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LeadAttributesTitle"/> values are not the same. </summary>
        public static bool operator !=(LeadAttributesTitle left, LeadAttributesTitle right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LeadAttributesTitle"/>. </summary>
        public static implicit operator LeadAttributesTitle(string value) => new LeadAttributesTitle(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LeadAttributesTitle other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LeadAttributesTitle other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
