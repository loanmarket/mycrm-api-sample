// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core.Pipeline;
using MyCrmSampleClient.MyCrmApi.Models;

namespace MyCrmSampleClient.MyCrmApi
{
    /// <summary> The ContactExternalReferenceRelationship service client. </summary>
    public partial class ContactExternalReferenceRelationshipClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ContactExternalReferenceRelationshipRestClient RestClient { get; }

        /// <summary> Initializes a new instance of ContactExternalReferenceRelationshipClient for mocking. </summary>
        protected ContactExternalReferenceRelationshipClient()
        {
        }

        /// <summary> Initializes a new instance of ContactExternalReferenceRelationshipClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        internal ContactExternalReferenceRelationshipClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            RestClient = new ContactExternalReferenceRelationshipRestClient(clientDiagnostics, pipeline, endpoint);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<RelationshipsMultipleDocument>> GetAsync(int id, ContactExternalReferenceRelationship relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(id, relationshipName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<RelationshipsMultipleDocument> Get(int id, ContactExternalReferenceRelationship relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(id, relationshipName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> GetHeadAsync(int id, string relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.GetHead");
            scope.Start();
            try
            {
                return await RestClient.GetHeadAsync(id, relationshipName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response GetHead(int id, string relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.GetHead");
            scope.Start();
            try
            {
                return RestClient.GetHead(id, relationshipName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="body"> The RelationshipsMultipleDocument to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PostAsync(int id, ContactExternalReferenceRelationship relationshipName, RelationshipsMultipleDocument body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Post");
            scope.Start();
            try
            {
                return await RestClient.PostAsync(id, relationshipName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="body"> The RelationshipsMultipleDocument to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Post(int id, ContactExternalReferenceRelationship relationshipName, RelationshipsMultipleDocument body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Post");
            scope.Start();
            try
            {
                return RestClient.Post(id, relationshipName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="body"> The RelationshipsMultipleDocument to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PatchAsync(int id, ContactExternalReferenceRelationship relationshipName, RelationshipsMultipleDocument body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Patch");
            scope.Start();
            try
            {
                return await RestClient.PatchAsync(id, relationshipName, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="body"> The RelationshipsMultipleDocument to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Patch(int id, ContactExternalReferenceRelationship relationshipName, RelationshipsMultipleDocument body = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Patch");
            scope.Start();
            try
            {
                return RestClient.Patch(id, relationshipName, body, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(int id, ContactExternalReferenceRelationship relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(id, relationshipName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="relationshipName"> The ContactExternalReferenceRelationship to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(int id, ContactExternalReferenceRelationship relationshipName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ContactExternalReferenceRelationshipClient.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(id, relationshipName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
