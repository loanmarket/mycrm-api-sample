// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MyCRMAPIModelFactory
    {
        /// <summary> Initializes a new instance of AdvisersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdvisersDocument"/> instance for mocking. </returns>
        public static AdvisersDocument AdvisersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdvisersDocumentLinks links = null, IEnumerable<Adviser> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Adviser>();
            included ??= new List<IncludedResource>();

            return new AdvisersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of TopLevelLinks. </summary>
        /// <param name="self"></param>
        /// <param name="related"></param>
        /// <param name="describedby"></param>
        /// <param name="first"></param>
        /// <param name="last"></param>
        /// <param name="prev"></param>
        /// <param name="next"></param>
        /// <returns> A new <see cref="Models.TopLevelLinks"/> instance for mocking. </returns>
        public static TopLevelLinks TopLevelLinks(string self = null, string related = null, string describedby = null, string first = null, string last = null, string prev = null, string next = null)
        {
            return new TopLevelLinks(self, related, describedby, first, last, prev, next);
        }

        /// <summary> Initializes a new instance of Adviser. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Adviser"/> instance for mocking. </returns>
        public static Adviser Adviser(string type = null, string id = null, AdviserAttributes attributes = null, AdviserRelationships relationships = null, AdviserLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Adviser(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AdviserAttributes. </summary>
        /// <param name="googlePlaces"></param>
        /// <param name="created"></param>
        /// <param name="isBrokerWebPublic"></param>
        /// <param name="myLeadGenActivationDate"></param>
        /// <param name="isMyLeadGenActive"></param>
        /// <param name="bio"></param>
        /// <param name="jobTitle"></param>
        /// <param name="website"></param>
        /// <param name="status"></param>
        /// <param name="email"></param>
        /// <param name="skype"></param>
        /// <param name="facebook"></param>
        /// <param name="linkedIn"></param>
        /// <param name="twitter"></param>
        /// <param name="youtubeFeatured"></param>
        /// <param name="instagram"></param>
        /// <param name="calendly"></param>
        /// <param name="myLeadGenerator"></param>
        /// <param name="profilePhotoHeadShot"></param>
        /// <param name="profilePhotoHalfBody"></param>
        /// <param name="profilePhotoFullBody"></param>
        /// <param name="countryCode"></param>
        /// <param name="youtubeChannel"></param>
        /// <returns> A new <see cref="Models.AdviserAttributes"/> instance for mocking. </returns>
        public static AdviserAttributes AdviserAttributes(string googlePlaces = null, DateTimeOffset? created = null, bool? isBrokerWebPublic = null, DateTimeOffset? myLeadGenActivationDate = null, bool? isMyLeadGenActive = null, string bio = null, string jobTitle = null, string website = null, string status = null, string email = null, string skype = null, string facebook = null, string linkedIn = null, string twitter = null, string youtubeFeatured = null, string instagram = null, string calendly = null, string myLeadGenerator = null, string profilePhotoHeadShot = null, string profilePhotoHalfBody = null, string profilePhotoFullBody = null, AdviserAttributesCountryCode? countryCode = null, string youtubeChannel = null)
        {
            return new AdviserAttributes(googlePlaces, created, isBrokerWebPublic, myLeadGenActivationDate, isMyLeadGenActive, bio, jobTitle, website, status, email, skype, facebook, linkedIn, twitter, youtubeFeatured, instagram, calendly, myLeadGenerator, profilePhotoHeadShot, profilePhotoHalfBody, profilePhotoFullBody, countryCode, youtubeChannel);
        }

        /// <summary> Initializes a new instance of RelationshipsSingleDocument. </summary>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.RelationshipsSingleDocument"/> instance for mocking. </returns>
        public static RelationshipsSingleDocument RelationshipsSingleDocument(RelationshipsSingleDocumentLinks links = null, IReadOnlyDictionary<string, object> meta = null, ResourceIdentifier data = null)
        {
            meta ??= new Dictionary<string, object>();

            return new RelationshipsSingleDocument(links, meta, data);
        }

        /// <summary> Initializes a new instance of RelationshipLinks. </summary>
        /// <param name="self"></param>
        /// <param name="related"></param>
        /// <returns> A new <see cref="Models.RelationshipLinks"/> instance for mocking. </returns>
        public static RelationshipLinks RelationshipLinks(string self = null, string related = null)
        {
            return new RelationshipLinks(self, related);
        }

        /// <summary> Initializes a new instance of RelationshipsMultipleDocument. </summary>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.RelationshipsMultipleDocument"/> instance for mocking. </returns>
        public static RelationshipsMultipleDocument RelationshipsMultipleDocument(RelationshipsMultipleDocumentLinks links = null, IReadOnlyDictionary<string, object> meta = null, IEnumerable<ResourceIdentifier> data = null)
        {
            meta ??= new Dictionary<string, object>();
            data ??= new List<ResourceIdentifier>();

            return new RelationshipsMultipleDocument(links, meta, data?.ToList());
        }

        /// <summary> Initializes a new instance of ResourceLinks. </summary>
        /// <param name="self"></param>
        /// <returns> A new <see cref="Models.ResourceLinks"/> instance for mocking. </returns>
        public static ResourceLinks ResourceLinks(string self = null)
        {
            return new ResourceLinks(self);
        }

        /// <summary> Initializes a new instance of AdviserDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdviserDocument"/> instance for mocking. </returns>
        public static AdviserDocument AdviserDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdviserDocumentLinks links = null, Adviser data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AdviserDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of AdviserDetailsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdviserDetailsDocument"/> instance for mocking. </returns>
        public static AdviserDetailsDocument AdviserDetailsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdviserDetailsDocumentLinks links = null, IEnumerable<AdviserDetail> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AdviserDetail>();
            included ??= new List<IncludedResource>();

            return new AdviserDetailsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AdviserDetail. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AdviserDetail"/> instance for mocking. </returns>
        public static AdviserDetail AdviserDetail(string type = null, string id = null, AdviserDetailAttributes attributes = null, AdviserDetailRelationships relationships = null, AdviserDetailLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AdviserDetail(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AdviserDetailAttributes. </summary>
        /// <param name="gender"></param>
        /// <param name="placeOfBirth"></param>
        /// <param name="title"></param>
        /// <param name="firstName"></param>
        /// <param name="middleName"></param>
        /// <param name="lastName"></param>
        /// <param name="preferredName"></param>
        /// <param name="homePhone"></param>
        /// <param name="businessPhone"></param>
        /// <param name="mobilePhone"></param>
        /// <param name="email"></param>
        /// <param name="birthCountry"></param>
        /// <param name="fax"></param>
        /// <param name="workEmail"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.AdviserDetailAttributes"/> instance for mocking. </returns>
        public static AdviserDetailAttributes AdviserDetailAttributes(AdviserDetailAttributesGender? gender = null, string placeOfBirth = null, string title = null, string firstName = null, string middleName = null, string lastName = null, string preferredName = null, string homePhone = null, string businessPhone = null, string mobilePhone = null, string email = null, string birthCountry = null, string fax = null, string workEmail = null, DateTimeOffset? dateOfBirth = null, DateTimeOffset? updated = null, DateTimeOffset? created = null, string description = null)
        {
            return new AdviserDetailAttributes(gender, placeOfBirth, title, firstName, middleName, lastName, preferredName, homePhone, businessPhone, mobilePhone, email, birthCountry, fax, workEmail, dateOfBirth, updated, created, description);
        }

        /// <summary> Initializes a new instance of AdviserDetailDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdviserDetailDocument"/> instance for mocking. </returns>
        public static AdviserDetailDocument AdviserDetailDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdviserDetailDocumentLinks links = null, AdviserDetail data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AdviserDetailDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of AssetCategoriesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetCategoriesDocument"/> instance for mocking. </returns>
        public static AssetCategoriesDocument AssetCategoriesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetCategoriesDocumentLinks links = null, IEnumerable<AssetCategory> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AssetCategory>();
            included ??= new List<IncludedResource>();

            return new AssetCategoriesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AssetCategory. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AssetCategory"/> instance for mocking. </returns>
        public static AssetCategory AssetCategory(string type = null, string id = null, AssetCategoryAttributes attributes = null, object relationships = null, AssetCategoryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AssetCategory(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AssetCategoryAttributes. </summary>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.AssetCategoryAttributes"/> instance for mocking. </returns>
        public static AssetCategoryAttributes AssetCategoryAttributes(string description = null)
        {
            return new AssetCategoryAttributes(description);
        }

        /// <summary> Initializes a new instance of AssetCategoryDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetCategoryDocument"/> instance for mocking. </returns>
        public static AssetCategoryDocument AssetCategoryDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetCategoryDocumentLinks links = null, AssetCategory data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AssetCategoryDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of FinancialAddressesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.FinancialAddressesDocument"/> instance for mocking. </returns>
        public static FinancialAddressesDocument FinancialAddressesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, FinancialAddressesDocumentLinks links = null, IEnumerable<FinancialAddress> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<FinancialAddress>();
            included ??= new List<IncludedResource>();

            return new FinancialAddressesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of FinancialAddress. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.FinancialAddress"/> instance for mocking. </returns>
        public static FinancialAddress FinancialAddress(string type = null, string id = null, FinancialAddressAttributes attributes = null, object relationships = null, FinancialAddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new FinancialAddress(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of FinancialAddressAttributes. </summary>
        /// <param name="formattedAddress"></param>
        /// <param name="streetAddress"></param>
        /// <param name="country"></param>
        /// <param name="suburb"></param>
        /// <param name="postCode"></param>
        /// <param name="state"></param>
        /// <returns> A new <see cref="Models.FinancialAddressAttributes"/> instance for mocking. </returns>
        public static FinancialAddressAttributes FinancialAddressAttributes(string formattedAddress = null, string streetAddress = null, string country = null, string suburb = null, string postCode = null, string state = null)
        {
            return new FinancialAddressAttributes(formattedAddress, streetAddress, country, suburb, postCode, state);
        }

        /// <summary> Initializes a new instance of OwnersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.OwnersDocument"/> instance for mocking. </returns>
        public static OwnersDocument OwnersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, OwnersDocumentLinks links = null, IEnumerable<Owner> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Owner>();
            included ??= new List<IncludedResource>();

            return new OwnersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Owner. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Owner"/> instance for mocking. </returns>
        public static Owner Owner(string type = null, string id = null, OwnerAttributes attributes = null, OwnerRelationships relationships = null, OwnerLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Owner(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of OwnerAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="ownershipPercentage"></param>
        /// <returns> A new <see cref="Models.OwnerAttributes"/> instance for mocking. </returns>
        public static OwnerAttributes OwnerAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, double? ownershipPercentage = null)
        {
            return new OwnerAttributes(updated, created, ownershipPercentage);
        }

        /// <summary> Initializes a new instance of AssetsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetsDocument"/> instance for mocking. </returns>
        public static AssetsDocument AssetsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetsDocumentLinks links = null, IEnumerable<Asset> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Asset>();
            included ??= new List<IncludedResource>();

            return new AssetsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Asset. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Asset"/> instance for mocking. </returns>
        public static Asset Asset(string type = null, string id = null, AssetAttributes attributes = null, AssetRelationships relationships = null, AssetLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Asset(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AssetAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="description"></param>
        /// <param name="value"></param>
        /// <param name="accountName"></param>
        /// <param name="accountNumber"></param>
        /// <param name="bsb"></param>
        /// <param name="vehicleMake"></param>
        /// <param name="vehicleYear"></param>
        /// <param name="propertyType"></param>
        /// <param name="isRentalIncome"></param>
        /// <param name="isExistingMortgages"></param>
        /// <param name="assetTypeId"></param>
        /// <param name="isAccountDetailsKnown"></param>
        /// <param name="institution"></param>
        /// <param name="assetSubType"></param>
        /// <param name="assetSubTypeId"></param>
        /// <param name="assetType"></param>
        /// <param name="assetCategory"></param>
        /// <param name="currencyCode"></param>
        /// <param name="valuationBasis"></param>
        /// <param name="propertyZoningType"></param>
        /// <param name="addressPropertyType"></param>
        /// <param name="assetCategoryId"></param>
        /// <returns> A new <see cref="Models.AssetAttributes"/> instance for mocking. </returns>
        public static AssetAttributes AssetAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string description = null, double? value = null, string accountName = null, string accountNumber = null, string bsb = null, string vehicleMake = null, int? vehicleYear = null, string propertyType = null, bool? isRentalIncome = null, bool? isExistingMortgages = null, int? assetTypeId = null, bool? isAccountDetailsKnown = null, string institution = null, string assetSubType = null, int? assetSubTypeId = null, string assetType = null, string assetCategory = null, string currencyCode = null, string valuationBasis = null, string propertyZoningType = null, string addressPropertyType = null, int? assetCategoryId = null)
        {
            return new AssetAttributes(updated, created, description, value, accountName, accountNumber, bsb, vehicleMake, vehicleYear, propertyType, isRentalIncome, isExistingMortgages, assetTypeId, isAccountDetailsKnown, institution, assetSubType, assetSubTypeId, assetType, assetCategory, currencyCode, valuationBasis, propertyZoningType, addressPropertyType, assetCategoryId);
        }

        /// <summary> Initializes a new instance of AssetDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetDocument"/> instance for mocking. </returns>
        public static AssetDocument AssetDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetDocumentLinks links = null, Asset data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AssetDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of AssetSubTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetSubTypesDocument"/> instance for mocking. </returns>
        public static AssetSubTypesDocument AssetSubTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetSubTypesDocumentLinks links = null, IEnumerable<AssetSubType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AssetSubType>();
            included ??= new List<IncludedResource>();

            return new AssetSubTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AssetSubType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AssetSubType"/> instance for mocking. </returns>
        public static AssetSubType AssetSubType(string type = null, string id = null, AssetSubTypeAttributes attributes = null, object relationships = null, AssetSubTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AssetSubType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AssetSubTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.AssetSubTypeAttributes"/> instance for mocking. </returns>
        public static AssetSubTypeAttributes AssetSubTypeAttributes(string name = null)
        {
            return new AssetSubTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of AssetSubTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetSubTypeDocument"/> instance for mocking. </returns>
        public static AssetSubTypeDocument AssetSubTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetSubTypeDocumentLinks links = null, AssetSubType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AssetSubTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactsDocument"/> instance for mocking. </returns>
        public static ContactsDocument ContactsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactsDocumentLinks links = null, IEnumerable<Contact> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Contact>();
            included ??= new List<IncludedResource>();

            return new ContactsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Contact. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Contact"/> instance for mocking. </returns>
        public static Contact Contact(string type = null, string id = null, ContactAttributes attributes = null, ContactRelationships relationships = null, ContactLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Contact(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAttributes. </summary>
        /// <param name="mobile"></param>
        /// <param name="title"></param>
        /// <param name="firstName"></param>
        /// <param name="middleName"></param>
        /// <param name="lastName"></param>
        /// <param name="preferredName"></param>
        /// <param name="homePhone"></param>
        /// <param name="businessPhone"></param>
        /// <param name="email"></param>
        /// <param name="secondaryEmail"></param>
        /// <param name="maritalStatus"></param>
        /// <param name="gender"></param>
        /// <param name="updated"></param>
        /// <param name="hasMarketingConsent"></param>
        /// <param name="dateOfBirth"></param>
        /// <param name="isPrimary"></param>
        /// <param name="role"></param>
        /// <param name="created"></param>
        /// <returns> A new <see cref="Models.ContactAttributes"/> instance for mocking. </returns>
        public static ContactAttributes ContactAttributes(string mobile = null, string title = null, string firstName = null, string middleName = null, string lastName = null, string preferredName = null, string homePhone = null, string businessPhone = null, string email = null, string secondaryEmail = null, ContactAttributesMaritalStatus? maritalStatus = null, ContactAttributesGender? gender = null, DateTimeOffset? updated = null, bool? hasMarketingConsent = null, DateTimeOffset? dateOfBirth = null, bool? isPrimary = null, ContactAttributesRole? role = null, DateTimeOffset? created = null)
        {
            return new ContactAttributes(mobile, title, firstName, middleName, lastName, preferredName, homePhone, businessPhone, email, secondaryEmail, maritalStatus, gender, updated, hasMarketingConsent, dateOfBirth, isPrimary, role, created);
        }

        /// <summary> Initializes a new instance of AssetTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetTypesDocument"/> instance for mocking. </returns>
        public static AssetTypesDocument AssetTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetTypesDocumentLinks links = null, IEnumerable<AssetType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AssetType>();
            included ??= new List<IncludedResource>();

            return new AssetTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AssetType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AssetType"/> instance for mocking. </returns>
        public static AssetType AssetType(string type = null, string id = null, AssetTypeAttributes attributes = null, object relationships = null, AssetTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AssetType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AssetTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.AssetTypeAttributes"/> instance for mocking. </returns>
        public static AssetTypeAttributes AssetTypeAttributes(string name = null)
        {
            return new AssetTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of AssetTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AssetTypeDocument"/> instance for mocking. </returns>
        public static AssetTypeDocument AssetTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AssetTypeDocumentLinks links = null, AssetType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new AssetTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IntegrationsDocument"/> instance for mocking. </returns>
        public static IntegrationsDocument IntegrationsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IntegrationsDocumentLinks links = null, IEnumerable<Integration> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Integration>();
            included ??= new List<IncludedResource>();

            return new IntegrationsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Integration. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Integration"/> instance for mocking. </returns>
        public static Integration Integration(string type = null, string id = null, IntegrationAttributes attributes = null, IntegrationRelationships relationships = null, IntegrationLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Integration(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of IntegrationAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.IntegrationAttributes"/> instance for mocking. </returns>
        public static IntegrationAttributes IntegrationAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string name = null, string description = null)
        {
            return new IntegrationAttributes(updated, created, name, description);
        }

        /// <summary> Initializes a new instance of ContactExternalReferencesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactExternalReferencesDocument"/> instance for mocking. </returns>
        public static ContactExternalReferencesDocument ContactExternalReferencesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactExternalReferencesDocumentLinks links = null, IEnumerable<ContactExternalReference> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactExternalReference>();
            included ??= new List<IncludedResource>();

            return new ContactExternalReferencesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactExternalReference. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactExternalReference"/> instance for mocking. </returns>
        public static ContactExternalReference ContactExternalReference(string type = null, string id = null, ContactExternalReferenceAttributes attributes = null, ContactExternalReferenceRelationships relationships = null, ContactExternalReferenceLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactExternalReference(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactExternalReferenceDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactExternalReferenceDocument"/> instance for mocking. </returns>
        public static ContactExternalReferenceDocument ContactExternalReferenceDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactExternalReferenceDocumentLinks links = null, ContactExternalReference data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactExternalReferenceDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of BusinessesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.BusinessesDocument"/> instance for mocking. </returns>
        public static BusinessesDocument BusinessesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, BusinessesDocumentLinks links = null, IEnumerable<Business> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Business>();
            included ??= new List<IncludedResource>();

            return new BusinessesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Business. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Business"/> instance for mocking. </returns>
        public static Business Business(string type = null, string id = null, BusinessAttributes attributes = null, BusinessRelationships relationships = null, BusinessLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Business(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of BusinessAttributes. </summary>
        /// <param name="created"></param>
        /// <param name="name"></param>
        /// <param name="phone"></param>
        /// <param name="email"></param>
        /// <param name="taxNumber"></param>
        /// <param name="companyNumber"></param>
        /// <param name="abn"></param>
        /// <param name="acn"></param>
        /// <param name="notes"></param>
        /// <param name="description"></param>
        /// <param name="businessType"></param>
        /// <param name="updated"></param>
        /// <returns> A new <see cref="Models.BusinessAttributes"/> instance for mocking. </returns>
        public static BusinessAttributes BusinessAttributes(DateTimeOffset? created = null, string name = null, string phone = null, string email = null, string taxNumber = null, string companyNumber = null, string abn = null, string acn = null, string notes = null, string description = null, string businessType = null, DateTimeOffset? updated = null)
        {
            return new BusinessAttributes(created, name, phone, email, taxNumber, companyNumber, abn, acn, notes, description, businessType, updated);
        }

        /// <summary> Initializes a new instance of ContactGroupsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupsDocument"/> instance for mocking. </returns>
        public static ContactGroupsDocument ContactGroupsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupsDocumentLinks links = null, IEnumerable<ContactGroup> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactGroup>();
            included ??= new List<IncludedResource>();

            return new ContactGroupsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactGroup. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactGroup"/> instance for mocking. </returns>
        public static ContactGroup ContactGroup(string type = null, string id = null, ContactGroupAttributes attributes = null, ContactGroupRelationships relationships = null, ContactGroupLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactGroup(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactGroupAttributes. </summary>
        /// <param name="enquirySourceCategoryId"></param>
        /// <param name="created"></param>
        /// <param name="reviewMonth"></param>
        /// <param name="utmSource"></param>
        /// <param name="utmMedium"></param>
        /// <param name="utmTerm"></param>
        /// <param name="utmContent"></param>
        /// <param name="utmCampaign"></param>
        /// <param name="categories"></param>
        /// <param name="sourceAdditionalDetails"></param>
        /// <param name="enquirySourceSystemUrl"></param>
        /// <param name="enquirySourceReferrerName"></param>
        /// <param name="enquirySourceReferrerOrganisationName"></param>
        /// <param name="contactType"></param>
        /// <param name="notes"></param>
        /// <param name="updated"></param>
        /// <param name="enquirySourceId"></param>
        /// <param name="enquirySourceCategory"></param>
        /// <param name="enquirySource"></param>
        /// <param name="enquirySourceReferrerId"></param>
        /// <returns> A new <see cref="Models.ContactGroupAttributes"/> instance for mocking. </returns>
        public static ContactGroupAttributes ContactGroupAttributes(int? enquirySourceCategoryId = null, DateTimeOffset? created = null, int? reviewMonth = null, string utmSource = null, string utmMedium = null, string utmTerm = null, string utmContent = null, string utmCampaign = null, IEnumerable<string> categories = null, string sourceAdditionalDetails = null, string enquirySourceSystemUrl = null, string enquirySourceReferrerName = null, string enquirySourceReferrerOrganisationName = null, ContactGroupAttributesContactType? contactType = null, string notes = null, DateTimeOffset? updated = null, int? enquirySourceId = null, string enquirySourceCategory = null, string enquirySource = null, string enquirySourceReferrerId = null)
        {
            categories ??= new List<string>();

            return new ContactGroupAttributes(enquirySourceCategoryId, created, reviewMonth, utmSource, utmMedium, utmTerm, utmContent, utmCampaign, categories?.ToList(), sourceAdditionalDetails, enquirySourceSystemUrl, enquirySourceReferrerName, enquirySourceReferrerOrganisationName, contactType, notes, updated, enquirySourceId, enquirySourceCategory, enquirySource, enquirySourceReferrerId);
        }

        /// <summary> Initializes a new instance of ContactGroupDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupDocument"/> instance for mocking. </returns>
        public static ContactGroupDocument ContactGroupDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupDocumentLinks links = null, ContactGroup data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactGroupDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactMarketingDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactMarketingDocument"/> instance for mocking. </returns>
        public static ContactMarketingDocument ContactMarketingDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactMarketingDocumentLinks links = null, ContactMarketing data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactMarketingDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactMarketing. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactMarketing"/> instance for mocking. </returns>
        public static ContactMarketing ContactMarketing(string type = null, string id = null, ContactMarketingAttributes attributes = null, object relationships = null, ContactMarketingLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactMarketing(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactMarketingAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="hasMarketingConsent"></param>
        /// <returns> A new <see cref="Models.ContactMarketingAttributes"/> instance for mocking. </returns>
        public static ContactMarketingAttributes ContactMarketingAttributes(DateTimeOffset? updated = null, bool? hasMarketingConsent = null)
        {
            return new ContactMarketingAttributes(updated, hasMarketingConsent);
        }

        /// <summary> Initializes a new instance of ContactDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactDocument"/> instance for mocking. </returns>
        public static ContactDocument ContactDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactDocumentLinks links = null, Contact data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealsDocument"/> instance for mocking. </returns>
        public static DealsDocument DealsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealsDocumentLinks links = null, IEnumerable<Deal> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Deal>();
            included ??= new List<IncludedResource>();

            return new DealsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Deal. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Deal"/> instance for mocking. </returns>
        public static Deal Deal(string type = null, string id = null, DealAttributes attributes = null, DealRelationships relationships = null, DealLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Deal(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="dates"></param>
        /// <param name="totalLoanAmount"></param>
        /// <param name="name"></param>
        /// <param name="dealStatus"></param>
        /// <param name="opportunity"></param>
        /// <param name="splits"></param>
        /// <param name="lenderName"></param>
        /// <param name="customStatusName"></param>
        /// <param name="dealType"></param>
        /// <returns> A new <see cref="Models.DealAttributes"/> instance for mocking. </returns>
        public static DealAttributes DealAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, ImportantDatesSet dates = null, double? totalLoanAmount = null, string name = null, DealAttributesDealStatus? dealStatus = null, Opportunity opportunity = null, IEnumerable<Split> splits = null, string lenderName = null, string customStatusName = null, DealAttributesDealType? dealType = null)
        {
            splits ??= new List<Split>();

            return new DealAttributes(updated, created, dates, totalLoanAmount, name, dealStatus, opportunity, splits?.ToList(), lenderName, customStatusName, dealType);
        }

        /// <summary> Initializes a new instance of Split. </summary>
        /// <param name="loanTermYears"></param>
        /// <param name="rateType"></param>
        /// <param name="loanStructureType"></param>
        /// <param name="amount"></param>
        /// <param name="interestRate"></param>
        /// <param name="rateTypePeriodMonths"></param>
        /// <param name="paymentAmount"></param>
        /// <param name="fixedRateStartDate"></param>
        /// <param name="fixedRateEndDate"></param>
        /// <param name="interestOnlyStartDate"></param>
        /// <param name="interestOnlyEndDate"></param>
        /// <param name="repaymentHolidayStartDate"></param>
        /// <param name="repaymentHolidayEndDate"></param>
        /// <returns> A new <see cref="Models.Split"/> instance for mocking. </returns>
        public static Split Split(double? loanTermYears = null, string rateType = null, LoanStructureType? loanStructureType = null, double? amount = null, double? interestRate = null, int? rateTypePeriodMonths = null, double? paymentAmount = null, DateTimeOffset? fixedRateStartDate = null, DateTimeOffset? fixedRateEndDate = null, DateTimeOffset? interestOnlyStartDate = null, DateTimeOffset? interestOnlyEndDate = null, DateTimeOffset? repaymentHolidayStartDate = null, DateTimeOffset? repaymentHolidayEndDate = null)
        {
            return new Split(loanTermYears, rateType, loanStructureType, amount, interestRate, rateTypePeriodMonths, paymentAmount, fixedRateStartDate, fixedRateEndDate, interestOnlyStartDate, interestOnlyEndDate, repaymentHolidayStartDate, repaymentHolidayEndDate);
        }

        /// <summary> Initializes a new instance of DealExternalReferencesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealExternalReferencesDocument"/> instance for mocking. </returns>
        public static DealExternalReferencesDocument DealExternalReferencesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealExternalReferencesDocumentLinks links = null, IEnumerable<DealExternalReference> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealExternalReference>();
            included ??= new List<IncludedResource>();

            return new DealExternalReferencesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealExternalReference. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealExternalReference"/> instance for mocking. </returns>
        public static DealExternalReference DealExternalReference(string type = null, string id = null, DealExternalReferenceAttributes attributes = null, DealExternalReferenceRelationships relationships = null, DealExternalReferenceLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealExternalReference(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealExternalReferenceDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealExternalReferenceDocument"/> instance for mocking. </returns>
        public static DealExternalReferenceDocument DealExternalReferenceDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealExternalReferenceDocumentLinks links = null, DealExternalReference data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealExternalReferenceDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealNoteDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealNoteDocument"/> instance for mocking. </returns>
        public static DealNoteDocument DealNoteDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealNoteDocumentLinks links = null, DealNote data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealNoteDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealNote. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealNote"/> instance for mocking. </returns>
        public static DealNote DealNote(string type = null, string id = null, DealNoteAttributes attributes = null, DealNoteRelationships relationships = null, DealNoteLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealNote(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealNoteAttributes. </summary>
        /// <param name="writtenBy"></param>
        /// <param name="title"></param>
        /// <param name="detail"></param>
        /// <returns> A new <see cref="Models.DealNoteAttributes"/> instance for mocking. </returns>
        public static DealNoteAttributes DealNoteAttributes(string writtenBy = null, string title = null, string detail = null)
        {
            return new DealNoteAttributes(writtenBy, title, detail);
        }

        /// <summary> Initializes a new instance of DealParticipantsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealParticipantsDocument"/> instance for mocking. </returns>
        public static DealParticipantsDocument DealParticipantsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealParticipantsDocumentLinks links = null, IEnumerable<DealParticipant> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealParticipant>();
            included ??= new List<IncludedResource>();

            return new DealParticipantsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealParticipant. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealParticipant"/> instance for mocking. </returns>
        public static DealParticipant DealParticipant(string type = null, string id = null, DealParticipantAttributes attributes = null, DealParticipantRelationships relationships = null, DealParticipantLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealParticipant(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealParticipantAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="isApplicant"></param>
        /// <param name="isDependent"></param>
        /// <param name="isGuarantor"></param>
        /// <returns> A new <see cref="Models.DealParticipantAttributes"/> instance for mocking. </returns>
        public static DealParticipantAttributes DealParticipantAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, bool? isApplicant = null, bool? isDependent = null, bool? isGuarantor = null)
        {
            return new DealParticipantAttributes(updated, created, isApplicant, isDependent, isGuarantor);
        }

        /// <summary> Initializes a new instance of DealParticipantDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealParticipantDocument"/> instance for mocking. </returns>
        public static DealParticipantDocument DealParticipantDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealParticipantDocumentLinks links = null, DealParticipant data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealParticipantDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealScenariosDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealScenariosDocument"/> instance for mocking. </returns>
        public static DealScenariosDocument DealScenariosDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealScenariosDocumentLinks links = null, IEnumerable<DealScenario> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealScenario>();
            included ??= new List<IncludedResource>();

            return new DealScenariosDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealScenario. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"> Any object. </param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealScenario"/> instance for mocking. </returns>
        public static DealScenario DealScenario(string type = null, string id = null, object attributes = null, DealScenarioRelationships relationships = null, DealScenarioLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealScenario(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealDocument"/> instance for mocking. </returns>
        public static DealDocument DealDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealDocumentLinks links = null, Deal data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealSecuritiesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealSecuritiesDocument"/> instance for mocking. </returns>
        public static DealSecuritiesDocument DealSecuritiesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealSecuritiesDocumentLinks links = null, IEnumerable<DealSecurity> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealSecurity>();
            included ??= new List<IncludedResource>();

            return new DealSecuritiesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealSecurity. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealSecurity"/> instance for mocking. </returns>
        public static DealSecurity DealSecurity(string type = null, string id = null, DealSecurityAttributes attributes = null, DealSecurityRelationships relationships = null, DealSecurityLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealSecurity(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealSecurityAttributes. </summary>
        /// <param name="contactForAccess"></param>
        /// <param name="isPreApproval"></param>
        /// <param name="contractPrice"></param>
        /// <param name="landValue"></param>
        /// <param name="currentValue"></param>
        /// <param name="contractDate"></param>
        /// <param name="licensedRealEstateAgentContract"></param>
        /// <param name="propertyState"></param>
        /// <param name="isElectronicTransfer"></param>
        /// <param name="titleType"></param>
        /// <param name="title"></param>
        /// <param name="valuationBasis"></param>
        /// <param name="propertyType"></param>
        /// <param name="propertyZoning"></param>
        /// <param name="propertyHolding"></param>
        /// <param name="propertyPrimaryPurpose"></param>
        /// <param name="futureValue"></param>
        /// <param name="buildAmount"></param>
        /// <param name="propertyStatus"></param>
        /// <param name="constructionType"></param>
        /// <param name="constructionCategory"></param>
        /// <param name="propertyTransaction"></param>
        /// <param name="securityType"></param>
        /// <param name="propertySuburb"></param>
        /// <param name="accessFaxNumber"></param>
        /// <param name="accessFaxAreaCode"></param>
        /// <param name="accessMobileNumber"></param>
        /// <param name="accessMobileAreaCode"></param>
        /// <param name="accessPhoneNumber"></param>
        /// <param name="accessPhoneAreaCode"></param>
        /// <param name="accessContactLastName"></param>
        /// <param name="isAnnualPropertyTax"></param>
        /// <param name="accessContactFirstName"></param>
        /// <param name="accessContactTitle"></param>
        /// <returns> A new <see cref="Models.DealSecurityAttributes"/> instance for mocking. </returns>
        public static DealSecurityAttributes DealSecurityAttributes(DealSecurityAttributesContactForAccess? contactForAccess = null, bool? isPreApproval = null, double? contractPrice = null, double? landValue = null, double? currentValue = null, DateTimeOffset? contractDate = null, bool? licensedRealEstateAgentContract = null, string propertyState = null, bool? isElectronicTransfer = null, string titleType = null, string title = null, string valuationBasis = null, string propertyType = null, string propertyZoning = null, string propertyHolding = null, string propertyPrimaryPurpose = null, double? futureValue = null, double? buildAmount = null, string propertyStatus = null, string constructionType = null, string constructionCategory = null, string propertyTransaction = null, string securityType = null, string propertySuburb = null, string accessFaxNumber = null, string accessFaxAreaCode = null, string accessMobileNumber = null, string accessMobileAreaCode = null, string accessPhoneNumber = null, string accessPhoneAreaCode = null, string accessContactLastName = null, bool? isAnnualPropertyTax = null, string accessContactFirstName = null, string accessContactTitle = null)
        {
            return new DealSecurityAttributes(contactForAccess, isPreApproval, contractPrice, landValue, currentValue, contractDate, licensedRealEstateAgentContract, propertyState, isElectronicTransfer, titleType, title, valuationBasis, propertyType, propertyZoning, propertyHolding, propertyPrimaryPurpose, futureValue, buildAmount, propertyStatus, constructionType, constructionCategory, propertyTransaction, securityType, propertySuburb, accessFaxNumber, accessFaxAreaCode, accessMobileNumber, accessMobileAreaCode, accessPhoneNumber, accessPhoneAreaCode, accessContactLastName, isAnnualPropertyTax, accessContactFirstName, accessContactTitle);
        }

        /// <summary> Initializes a new instance of DealSecurityDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealSecurityDocument"/> instance for mocking. </returns>
        public static DealSecurityDocument DealSecurityDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealSecurityDocumentLinks links = null, DealSecurity data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealSecurityDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of EnquirySourcesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.EnquirySourcesDocument"/> instance for mocking. </returns>
        public static EnquirySourcesDocument EnquirySourcesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, EnquirySourcesDocumentLinks links = null, IEnumerable<EnquirySource> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<EnquirySource>();
            included ??= new List<IncludedResource>();

            return new EnquirySourcesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of EnquirySource. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.EnquirySource"/> instance for mocking. </returns>
        public static EnquirySource EnquirySource(string type = null, string id = null, EnquirySourceAttributes attributes = null, object relationships = null, EnquirySourceLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new EnquirySource(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of EnquirySourceAttributes. </summary>
        /// <param name="sourceCategoryId"></param>
        /// <param name="sourceCategoryName"></param>
        /// <param name="sourceId"></param>
        /// <param name="sourceName"></param>
        /// <returns> A new <see cref="Models.EnquirySourceAttributes"/> instance for mocking. </returns>
        public static EnquirySourceAttributes EnquirySourceAttributes(int? sourceCategoryId = null, string sourceCategoryName = null, int? sourceId = null, string sourceName = null)
        {
            return new EnquirySourceAttributes(sourceCategoryId, sourceCategoryName, sourceId, sourceName);
        }

        /// <summary> Initializes a new instance of EnquirySourceDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.EnquirySourceDocument"/> instance for mocking. </returns>
        public static EnquirySourceDocument EnquirySourceDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, EnquirySourceDocumentLinks links = null, EnquirySource data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new EnquirySourceDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ExpenseTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpenseTypesDocument"/> instance for mocking. </returns>
        public static ExpenseTypesDocument ExpenseTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpenseTypesDocumentLinks links = null, IEnumerable<ExpenseType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ExpenseType>();
            included ??= new List<IncludedResource>();

            return new ExpenseTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ExpenseType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ExpenseType"/> instance for mocking. </returns>
        public static ExpenseType ExpenseType(string type = null, string id = null, ExpenseTypeAttributes attributes = null, ExpenseTypeRelationships relationships = null, ExpenseTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ExpenseType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ExpenseTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.ExpenseTypeAttributes"/> instance for mocking. </returns>
        public static ExpenseTypeAttributes ExpenseTypeAttributes(string name = null)
        {
            return new ExpenseTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of ExpenseCategoriesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpenseCategoriesDocument"/> instance for mocking. </returns>
        public static ExpenseCategoriesDocument ExpenseCategoriesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpenseCategoriesDocumentLinks links = null, IEnumerable<ExpenseCategory> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ExpenseCategory>();
            included ??= new List<IncludedResource>();

            return new ExpenseCategoriesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ExpenseCategory. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ExpenseCategory"/> instance for mocking. </returns>
        public static ExpenseCategory ExpenseCategory(string type = null, string id = null, ExpenseCategoryAttributes attributes = null, ExpenseCategoryRelationships relationships = null, ExpenseCategoryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ExpenseCategory(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ExpenseCategoryAttributes. </summary>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.ExpenseCategoryAttributes"/> instance for mocking. </returns>
        public static ExpenseCategoryAttributes ExpenseCategoryAttributes(string description = null)
        {
            return new ExpenseCategoryAttributes(description);
        }

        /// <summary> Initializes a new instance of ExpenseCategoryDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpenseCategoryDocument"/> instance for mocking. </returns>
        public static ExpenseCategoryDocument ExpenseCategoryDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpenseCategoryDocumentLinks links = null, ExpenseCategory data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ExpenseCategoryDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ExpensesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpensesDocument"/> instance for mocking. </returns>
        public static ExpensesDocument ExpensesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpensesDocumentLinks links = null, IEnumerable<Expense> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Expense>();
            included ??= new List<IncludedResource>();

            return new ExpensesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Expense. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Expense"/> instance for mocking. </returns>
        public static Expense Expense(string type = null, string id = null, ExpenseAttributes attributes = null, ExpenseRelationships relationships = null, ExpenseLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Expense(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ExpenseAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="description"></param>
        /// <param name="value"></param>
        /// <param name="expenseTypeId"></param>
        /// <param name="frequency"></param>
        /// <param name="expenseCategory"></param>
        /// <param name="expenseType"></param>
        /// <param name="expenseCategoryId"></param>
        /// <returns> A new <see cref="Models.ExpenseAttributes"/> instance for mocking. </returns>
        public static ExpenseAttributes ExpenseAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string description = null, double? value = null, int? expenseTypeId = null, string frequency = null, string expenseCategory = null, string expenseType = null, int? expenseCategoryId = null)
        {
            return new ExpenseAttributes(updated, created, description, value, expenseTypeId, frequency, expenseCategory, expenseType, expenseCategoryId);
        }

        /// <summary> Initializes a new instance of ExpenseDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpenseDocument"/> instance for mocking. </returns>
        public static ExpenseDocument ExpenseDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpenseDocumentLinks links = null, Expense data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ExpenseDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ExpenseTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ExpenseTypeDocument"/> instance for mocking. </returns>
        public static ExpenseTypeDocument ExpenseTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ExpenseTypeDocumentLinks links = null, ExpenseType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ExpenseTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IncomeTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomeTypesDocument"/> instance for mocking. </returns>
        public static IncomeTypesDocument IncomeTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomeTypesDocumentLinks links = null, IEnumerable<IncomeType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<IncomeType>();
            included ??= new List<IncludedResource>();

            return new IncomeTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of IncomeType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.IncomeType"/> instance for mocking. </returns>
        public static IncomeType IncomeType(string type = null, string id = null, IncomeTypeAttributes attributes = null, IncomeTypeRelationships relationships = null, IncomeTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new IncomeType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of IncomeTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.IncomeTypeAttributes"/> instance for mocking. </returns>
        public static IncomeTypeAttributes IncomeTypeAttributes(string name = null)
        {
            return new IncomeTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of IncomeCategoriesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomeCategoriesDocument"/> instance for mocking. </returns>
        public static IncomeCategoriesDocument IncomeCategoriesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomeCategoriesDocumentLinks links = null, IEnumerable<IncomeCategory> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<IncomeCategory>();
            included ??= new List<IncludedResource>();

            return new IncomeCategoriesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of IncomeCategory. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.IncomeCategory"/> instance for mocking. </returns>
        public static IncomeCategory IncomeCategory(string type = null, string id = null, IncomeCategoryAttributes attributes = null, IncomeCategoryRelationships relationships = null, IncomeCategoryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new IncomeCategory(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of IncomeCategoryAttributes. </summary>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.IncomeCategoryAttributes"/> instance for mocking. </returns>
        public static IncomeCategoryAttributes IncomeCategoryAttributes(string description = null)
        {
            return new IncomeCategoryAttributes(description);
        }

        /// <summary> Initializes a new instance of IncomeCategoryDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomeCategoryDocument"/> instance for mocking. </returns>
        public static IncomeCategoryDocument IncomeCategoryDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomeCategoryDocumentLinks links = null, IncomeCategory data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new IncomeCategoryDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IncomesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomesDocument"/> instance for mocking. </returns>
        public static IncomesDocument IncomesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomesDocumentLinks links = null, IEnumerable<Income> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Income>();
            included ??= new List<IncludedResource>();

            return new IncomesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Income. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Income"/> instance for mocking. </returns>
        public static Income Income(string type = null, string id = null, IncomeAttributes attributes = null, IncomeRelationships relationships = null, IncomeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Income(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of IncomeAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="description"></param>
        /// <param name="value"></param>
        /// <param name="incomeTypeId"></param>
        /// <param name="incomeVerification"></param>
        /// <param name="frequency"></param>
        /// <param name="incomeCategory"></param>
        /// <param name="incomeType"></param>
        /// <param name="incomeCategoryId"></param>
        /// <returns> A new <see cref="Models.IncomeAttributes"/> instance for mocking. </returns>
        public static IncomeAttributes IncomeAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string description = null, double? value = null, int? incomeTypeId = null, string incomeVerification = null, string frequency = null, string incomeCategory = null, string incomeType = null, int? incomeCategoryId = null)
        {
            return new IncomeAttributes(updated, created, description, value, incomeTypeId, incomeVerification, frequency, incomeCategory, incomeType, incomeCategoryId);
        }

        /// <summary> Initializes a new instance of IncomeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomeDocument"/> instance for mocking. </returns>
        public static IncomeDocument IncomeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomeDocumentLinks links = null, Income data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new IncomeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IncomeTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IncomeTypeDocument"/> instance for mocking. </returns>
        public static IncomeTypeDocument IncomeTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IncomeTypeDocumentLinks links = null, IncomeType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new IncomeTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IntegrationDocument"/> instance for mocking. </returns>
        public static IntegrationDocument IntegrationDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IntegrationDocumentLinks links = null, Integration data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new IntegrationDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of LeadDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LeadDocument"/> instance for mocking. </returns>
        public static LeadDocument LeadDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LeadDocumentLinks links = null, Lead data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new LeadDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of Lead. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Lead"/> instance for mocking. </returns>
        public static Lead Lead(string type = null, string id = null, LeadAttributes attributes = null, object relationships = null, LeadLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Lead(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of LeadAttributes. </summary>
        /// <param name="dateOfBirth"></param>
        /// <param name="title"></param>
        /// <param name="firstName"></param>
        /// <param name="preferredName"></param>
        /// <param name="lastName"></param>
        /// <param name="email"></param>
        /// <param name="mobile"></param>
        /// <param name="contactMatchExisting"></param>
        /// <param name="gender"></param>
        /// <param name="maritalStatus"></param>
        /// <param name="hasMarketingConsent"></param>
        /// <param name="isGuarantor"></param>
        /// <param name="isDependant"></param>
        /// <param name="isPrimary"></param>
        /// <param name="streetAddress"></param>
        /// <param name="suburb"></param>
        /// <param name="state"></param>
        /// <param name="postCode"></param>
        /// <param name="country"></param>
        /// <param name="addressType"></param>
        /// <param name="formattedAddress"></param>
        /// <param name="dealName"></param>
        /// <param name="noteTitle"></param>
        /// <param name="noteDetails"></param>
        /// <param name="utmSource"></param>
        /// <param name="utmMedium"></param>
        /// <param name="utmCampaign"></param>
        /// <param name="utmTerm"></param>
        /// <param name="utmContent"></param>
        /// <param name="sourceSystemUrl"></param>
        /// <param name="sourceId"></param>
        /// <param name="sourceCategoryId"></param>
        /// <param name="sourceReferrerId"></param>
        /// <param name="sourceAdditionalDetails"></param>
        /// <param name="externalReference"></param>
        /// <param name="externalIntegration"></param>
        /// <param name="externalIntegrationAllowCreate"></param>
        /// <param name="sendNotification"></param>
        /// <param name="customStatusName"></param>
        /// <param name="dealStatus"></param>
        /// <returns> A new <see cref="Models.LeadAttributes"/> instance for mocking. </returns>
        public static LeadAttributes LeadAttributes(DateTimeOffset? dateOfBirth = null, LeadAttributesTitle? title = null, string firstName = null, string preferredName = null, string lastName = null, string email = null, string mobile = null, LeadAttributesContactMatchExisting? contactMatchExisting = null, LeadAttributesGender? gender = null, LeadAttributesMaritalStatus? maritalStatus = null, bool? hasMarketingConsent = null, bool? isGuarantor = null, bool? isDependant = null, bool? isPrimary = null, string streetAddress = null, string suburb = null, string state = null, string postCode = null, string country = null, LeadAttributesAddressType? addressType = null, string formattedAddress = null, string dealName = null, string noteTitle = null, string noteDetails = null, string utmSource = null, string utmMedium = null, string utmCampaign = null, string utmTerm = null, string utmContent = null, string sourceSystemUrl = null, int? sourceId = null, int? sourceCategoryId = null, string sourceReferrerId = null, string sourceAdditionalDetails = null, string externalReference = null, string externalIntegration = null, bool? externalIntegrationAllowCreate = null, bool? sendNotification = null, string customStatusName = null, LeadAttributesDealStatus? dealStatus = null)
        {
            return new LeadAttributes(dateOfBirth, title, firstName, preferredName, lastName, email, mobile, contactMatchExisting, gender, maritalStatus, hasMarketingConsent, isGuarantor, isDependant, isPrimary, streetAddress, suburb, state, postCode, country, addressType, formattedAddress, dealName, noteTitle, noteDetails, utmSource, utmMedium, utmCampaign, utmTerm, utmContent, sourceSystemUrl, sourceId, sourceCategoryId, sourceReferrerId, sourceAdditionalDetails, externalReference, externalIntegration, externalIntegrationAllowCreate, sendNotification, customStatusName, dealStatus);
        }

        /// <summary> Initializes a new instance of LiabilitiesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilitiesDocument"/> instance for mocking. </returns>
        public static LiabilitiesDocument LiabilitiesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilitiesDocumentLinks links = null, IEnumerable<Liability> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Liability>();
            included ??= new List<IncludedResource>();

            return new LiabilitiesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Liability. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Liability"/> instance for mocking. </returns>
        public static Liability Liability(string type = null, string id = null, LiabilityAttributes attributes = null, LiabilityRelationships relationships = null, LiabilityLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Liability(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of LiabilityAttributes. </summary>
        /// <param name="created"></param>
        /// <param name="repayment"></param>
        /// <param name="value"></param>
        /// <param name="limit"></param>
        /// <param name="accountName"></param>
        /// <param name="accountNumber"></param>
        /// <param name="bsb"></param>
        /// <param name="interestTaxDeductible"></param>
        /// <param name="interestRate"></param>
        /// <param name="isAccountDetailsKnown"></param>
        /// <param name="liabilityTypeId"></param>
        /// <param name="loanTerm"></param>
        /// <param name="liabilitySubTypeId"></param>
        /// <param name="repaymentFrequency"></param>
        /// <param name="liabilityCategory"></param>
        /// <param name="liabilitySubType"></param>
        /// <param name="liabilityType"></param>
        /// <param name="mortgagePriority"></param>
        /// <param name="updated"></param>
        /// <param name="creditorName"></param>
        /// <param name="loanRepaymentType"></param>
        /// <param name="liabilityCategoryId"></param>
        /// <returns> A new <see cref="Models.LiabilityAttributes"/> instance for mocking. </returns>
        public static LiabilityAttributes LiabilityAttributes(DateTimeOffset? created = null, double? repayment = null, double? value = null, double? limit = null, string accountName = null, string accountNumber = null, string bsb = null, bool? interestTaxDeductible = null, double? interestRate = null, bool? isAccountDetailsKnown = null, int? liabilityTypeId = null, int? loanTerm = null, int? liabilitySubTypeId = null, string repaymentFrequency = null, string liabilityCategory = null, string liabilitySubType = null, string liabilityType = null, string mortgagePriority = null, DateTimeOffset? updated = null, string creditorName = null, LiabilityAttributesLoanRepaymentType? loanRepaymentType = null, int? liabilityCategoryId = null)
        {
            return new LiabilityAttributes(created, repayment, value, limit, accountName, accountNumber, bsb, interestTaxDeductible, interestRate, isAccountDetailsKnown, liabilityTypeId, loanTerm, liabilitySubTypeId, repaymentFrequency, liabilityCategory, liabilitySubType, liabilityType, mortgagePriority, updated, creditorName, loanRepaymentType, liabilityCategoryId);
        }

        /// <summary> Initializes a new instance of LiabilityDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilityDocument"/> instance for mocking. </returns>
        public static LiabilityDocument LiabilityDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilityDocumentLinks links = null, Liability data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new LiabilityDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of LiabilityTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilityTypesDocument"/> instance for mocking. </returns>
        public static LiabilityTypesDocument LiabilityTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilityTypesDocumentLinks links = null, IEnumerable<LiabilityType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<LiabilityType>();
            included ??= new List<IncludedResource>();

            return new LiabilityTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of LiabilityType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.LiabilityType"/> instance for mocking. </returns>
        public static LiabilityType LiabilityType(string type = null, string id = null, LiabilityTypeAttributes attributes = null, LiabilityTypeRelationships relationships = null, LiabilityTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new LiabilityType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of LiabilityTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.LiabilityTypeAttributes"/> instance for mocking. </returns>
        public static LiabilityTypeAttributes LiabilityTypeAttributes(string name = null)
        {
            return new LiabilityTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of LiabilityCategoriesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilityCategoriesDocument"/> instance for mocking. </returns>
        public static LiabilityCategoriesDocument LiabilityCategoriesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilityCategoriesDocumentLinks links = null, IEnumerable<LiabilityCategory> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<LiabilityCategory>();
            included ??= new List<IncludedResource>();

            return new LiabilityCategoriesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of LiabilityCategory. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.LiabilityCategory"/> instance for mocking. </returns>
        public static LiabilityCategory LiabilityCategory(string type = null, string id = null, LiabilityCategoryAttributes attributes = null, LiabilityCategoryRelationships relationships = null, LiabilityCategoryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new LiabilityCategory(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of LiabilityCategoryAttributes. </summary>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.LiabilityCategoryAttributes"/> instance for mocking. </returns>
        public static LiabilityCategoryAttributes LiabilityCategoryAttributes(string description = null)
        {
            return new LiabilityCategoryAttributes(description);
        }

        /// <summary> Initializes a new instance of LiabilityCategoryDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilityCategoryDocument"/> instance for mocking. </returns>
        public static LiabilityCategoryDocument LiabilityCategoryDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilityCategoryDocumentLinks links = null, LiabilityCategory data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new LiabilityCategoryDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of LiabilityTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilityTypeDocument"/> instance for mocking. </returns>
        public static LiabilityTypeDocument LiabilityTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilityTypeDocumentLinks links = null, LiabilityType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new LiabilityTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of OrganisationAddressesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.OrganisationAddressesDocument"/> instance for mocking. </returns>
        public static OrganisationAddressesDocument OrganisationAddressesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, OrganisationAddressesDocumentLinks links = null, IEnumerable<OrganisationAddress> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<OrganisationAddress>();
            included ??= new List<IncludedResource>();

            return new OrganisationAddressesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of OrganisationAddress. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.OrganisationAddress"/> instance for mocking. </returns>
        public static OrganisationAddress OrganisationAddress(string type = null, string id = null, OrganisationAddressAttributes attributes = null, object relationships = null, OrganisationAddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new OrganisationAddress(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of OrganisationAddressAttributes. </summary>
        /// <param name="isMailing"></param>
        /// <param name="isCustomAddress"></param>
        /// <param name="formattedAddress"></param>
        /// <param name="streetAddress"></param>
        /// <param name="country"></param>
        /// <param name="suburb"></param>
        /// <param name="postCode"></param>
        /// <param name="state"></param>
        /// <returns> A new <see cref="Models.OrganisationAddressAttributes"/> instance for mocking. </returns>
        public static OrganisationAddressAttributes OrganisationAddressAttributes(bool? isMailing = null, bool? isCustomAddress = null, string formattedAddress = null, string streetAddress = null, string country = null, string suburb = null, string postCode = null, string state = null)
        {
            return new OrganisationAddressAttributes(isMailing, isCustomAddress, formattedAddress, streetAddress, country, suburb, postCode, state);
        }

        /// <summary> Initializes a new instance of OrganisationsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.OrganisationsDocument"/> instance for mocking. </returns>
        public static OrganisationsDocument OrganisationsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, OrganisationsDocumentLinks links = null, IEnumerable<Organisation> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Organisation>();
            included ??= new List<IncludedResource>();

            return new OrganisationsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Organisation. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Organisation"/> instance for mocking. </returns>
        public static Organisation Organisation(string type = null, string id = null, OrganisationAttributes attributes = null, OrganisationRelationships relationships = null, OrganisationLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Organisation(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of OrganisationAttributes. </summary>
        /// <param name="brandedCategory"></param>
        /// <param name="primaryBrandColour"></param>
        /// <param name="name"></param>
        /// <param name="tradingName"></param>
        /// <param name="website"></param>
        /// <param name="companyEmail"></param>
        /// <param name="isBrokerSearchVisible"></param>
        /// <param name="status"></param>
        /// <param name="slug"></param>
        /// <param name="businessNumber"></param>
        /// <param name="companyNumber"></param>
        /// <param name="officeDisplayName"></param>
        /// <param name="emailForCommissions"></param>
        /// <param name="phone"></param>
        /// <param name="fax"></param>
        /// <param name="brandLogoUrl"></param>
        /// <returns> A new <see cref="Models.OrganisationAttributes"/> instance for mocking. </returns>
        public static OrganisationAttributes OrganisationAttributes(string brandedCategory = null, string primaryBrandColour = null, string name = null, string tradingName = null, string website = null, string companyEmail = null, bool? isBrokerSearchVisible = null, string status = null, string slug = null, string businessNumber = null, string companyNumber = null, string officeDisplayName = null, string emailForCommissions = null, string phone = null, string fax = null, string brandLogoUrl = null)
        {
            return new OrganisationAttributes(brandedCategory, primaryBrandColour, name, tradingName, website, companyEmail, isBrokerSearchVisible, status, slug, businessNumber, companyNumber, officeDisplayName, emailForCommissions, phone, fax, brandLogoUrl);
        }

        /// <summary> Initializes a new instance of OrganisationDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.OrganisationDocument"/> instance for mocking. </returns>
        public static OrganisationDocument OrganisationDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, OrganisationDocumentLinks links = null, Organisation data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new OrganisationDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of PropertyTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.PropertyTypesDocument"/> instance for mocking. </returns>
        public static PropertyTypesDocument PropertyTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, PropertyTypesDocumentLinks links = null, IEnumerable<PropertyType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<PropertyType>();
            included ??= new List<IncludedResource>();

            return new PropertyTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of PropertyType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.PropertyType"/> instance for mocking. </returns>
        public static PropertyType PropertyType(string type = null, string id = null, PropertyTypeAttributes attributes = null, object relationships = null, PropertyTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new PropertyType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of PropertyTypeAttributes. </summary>
        /// <param name="propertyZoningType"></param>
        /// <param name="name"></param>
        /// <param name="propertyZoningTypeId"></param>
        /// <returns> A new <see cref="Models.PropertyTypeAttributes"/> instance for mocking. </returns>
        public static PropertyTypeAttributes PropertyTypeAttributes(string propertyZoningType = null, string name = null, int? propertyZoningTypeId = null)
        {
            return new PropertyTypeAttributes(propertyZoningType, name, propertyZoningTypeId);
        }

        /// <summary> Initializes a new instance of PropertyTypeDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.PropertyTypeDocument"/> instance for mocking. </returns>
        public static PropertyTypeDocument PropertyTypeDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, PropertyTypeDocumentLinks links = null, PropertyType data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new PropertyTypeDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ReferrersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrersDocument"/> instance for mocking. </returns>
        public static ReferrersDocument ReferrersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrersDocumentLinks links = null, IEnumerable<Referrer> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Referrer>();
            included ??= new List<IncludedResource>();

            return new ReferrersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Referrer. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Referrer"/> instance for mocking. </returns>
        public static Referrer Referrer(string type = null, string id = null, ReferrerAttributes attributes = null, object relationships = null, ReferrerLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Referrer(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ReferrerAttributes. </summary>
        /// <param name="referrerOrganisationName"></param>
        /// <param name="referrerName"></param>
        /// <returns> A new <see cref="Models.ReferrerAttributes"/> instance for mocking. </returns>
        public static ReferrerAttributes ReferrerAttributes(string referrerOrganisationName = null, string referrerName = null)
        {
            return new ReferrerAttributes(referrerOrganisationName, referrerName);
        }

        /// <summary> Initializes a new instance of ReferrerDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrerDocument"/> instance for mocking. </returns>
        public static ReferrerDocument ReferrerDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrerDocumentLinks links = null, Referrer data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ReferrerDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of StructuredLeadDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.StructuredLeadDocument"/> instance for mocking. </returns>
        public static StructuredLeadDocument StructuredLeadDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, StructuredLeadDocumentLinks links = null, StructuredLead data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new StructuredLeadDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of StructuredLead. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.StructuredLead"/> instance for mocking. </returns>
        public static StructuredLead StructuredLead(string type = null, string id = null, StructuredLeadAttributes attributes = null, object relationships = null, StructuredLeadLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new StructuredLead(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of StructuredLeadAttributes. </summary>
        /// <param name="contacts"></param>
        /// <param name="addresses"></param>
        /// <param name="assets"></param>
        /// <param name="expenses"></param>
        /// <param name="incomes"></param>
        /// <param name="liabilities"></param>
        /// <param name="employments"></param>
        /// <param name="utmSource"></param>
        /// <param name="utmMedium"></param>
        /// <param name="utmCampaign"></param>
        /// <param name="utmTerm"></param>
        /// <param name="utmContent"></param>
        /// <param name="sourceId"></param>
        /// <param name="sourceCategoryId"></param>
        /// <param name="sourceReferrerId"></param>
        /// <param name="sourceAdditionalDetails"></param>
        /// <param name="sourceSystemUrl"></param>
        /// <param name="dealName"></param>
        /// <param name="noteTitle"></param>
        /// <param name="noteDetails"></param>
        /// <param name="externalReference"></param>
        /// <param name="externalIntegration"></param>
        /// <param name="externalIntegrationAllowCreate"></param>
        /// <param name="sendNotification"></param>
        /// <param name="customStatusName"></param>
        /// <param name="dealStatus"></param>
        /// <returns> A new <see cref="Models.StructuredLeadAttributes"/> instance for mocking. </returns>
        public static StructuredLeadAttributes StructuredLeadAttributes(IEnumerable<LeadContact> contacts = null, IEnumerable<LeadAddress> addresses = null, IEnumerable<LeadAsset> assets = null, IEnumerable<LeadExpense> expenses = null, IEnumerable<LeadIncome> incomes = null, IEnumerable<LeadLiability> liabilities = null, IEnumerable<LeadEmployment> employments = null, string utmSource = null, string utmMedium = null, string utmCampaign = null, string utmTerm = null, string utmContent = null, int? sourceId = null, int? sourceCategoryId = null, string sourceReferrerId = null, string sourceAdditionalDetails = null, string sourceSystemUrl = null, string dealName = null, string noteTitle = null, string noteDetails = null, string externalReference = null, string externalIntegration = null, bool? externalIntegrationAllowCreate = null, bool? sendNotification = null, string customStatusName = null, StructuredLeadAttributesDealStatus? dealStatus = null)
        {
            contacts ??= new List<LeadContact>();
            addresses ??= new List<LeadAddress>();
            assets ??= new List<LeadAsset>();
            expenses ??= new List<LeadExpense>();
            incomes ??= new List<LeadIncome>();
            liabilities ??= new List<LeadLiability>();
            employments ??= new List<LeadEmployment>();

            return new StructuredLeadAttributes(contacts?.ToList(), addresses?.ToList(), assets?.ToList(), expenses?.ToList(), incomes?.ToList(), liabilities?.ToList(), employments?.ToList(), utmSource, utmMedium, utmCampaign, utmTerm, utmContent, sourceId, sourceCategoryId, sourceReferrerId, sourceAdditionalDetails, sourceSystemUrl, dealName, noteTitle, noteDetails, externalReference, externalIntegration, externalIntegrationAllowCreate, sendNotification, customStatusName, dealStatus);
        }

        /// <summary> Initializes a new instance of AgreementHoldersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AgreementHoldersDocument"/> instance for mocking. </returns>
        public static AgreementHoldersDocument AgreementHoldersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AgreementHoldersDocumentLinks links = null, IEnumerable<AgreementHolder> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AgreementHolder>();
            included ??= new List<IncludedResource>();

            return new AgreementHoldersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AgreementHolder. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AgreementHolder"/> instance for mocking. </returns>
        public static AgreementHolder AgreementHolder(string type = null, string id = null, AgreementHolderAttributes attributes = null, AgreementHolderRelationships relationships = null, AgreementHolderLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AgreementHolder(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AgreementHolderAttributes. </summary>
        /// <param name="appointmentEntity"></param>
        /// <param name="employmentType"></param>
        /// <param name="entityType"></param>
        /// <returns> A new <see cref="Models.AgreementHolderAttributes"/> instance for mocking. </returns>
        public static AgreementHolderAttributes AgreementHolderAttributes(string appointmentEntity = null, string employmentType = null, string entityType = null)
        {
            return new AgreementHolderAttributes(appointmentEntity, employmentType, entityType);
        }

        /// <summary> Initializes a new instance of AdviserAddressesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdviserAddressesDocument"/> instance for mocking. </returns>
        public static AdviserAddressesDocument AdviserAddressesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdviserAddressesDocumentLinks links = null, IEnumerable<AdviserAddress> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<AdviserAddress>();
            included ??= new List<IncludedResource>();

            return new AdviserAddressesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of AdviserAddress. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.AdviserAddress"/> instance for mocking. </returns>
        public static AdviserAddress AdviserAddress(string type = null, string id = null, AdviserAddressAttributes attributes = null, AdviserAddressRelationships relationships = null, AdviserAddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new AdviserAddress(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of AdviserAddressAttributes. </summary>
        /// <param name="isMailing"></param>
        /// <param name="isBusiness"></param>
        /// <param name="formattedAddress"></param>
        /// <param name="streetAddress"></param>
        /// <param name="country"></param>
        /// <param name="suburb"></param>
        /// <param name="postCode"></param>
        /// <param name="state"></param>
        /// <returns> A new <see cref="Models.AdviserAddressAttributes"/> instance for mocking. </returns>
        public static AdviserAddressAttributes AdviserAddressAttributes(bool? isMailing = null, bool? isBusiness = null, string formattedAddress = null, string streetAddress = null, string country = null, string suburb = null, string postCode = null, string state = null)
        {
            return new AdviserAddressAttributes(isMailing, isBusiness, formattedAddress, streetAddress, country, suburb, postCode, state);
        }

        /// <summary> Initializes a new instance of ReferrerOrganisationsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrerOrganisationsDocument"/> instance for mocking. </returns>
        public static ReferrerOrganisationsDocument ReferrerOrganisationsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrerOrganisationsDocumentLinks links = null, IEnumerable<ReferrerOrganisation> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ReferrerOrganisation>();
            included ??= new List<IncludedResource>();

            return new ReferrerOrganisationsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ReferrerOrganisation. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ReferrerOrganisation"/> instance for mocking. </returns>
        public static ReferrerOrganisation ReferrerOrganisation(string type = null, string id = null, ReferrerOrganisationAttributes attributes = null, ReferrerOrganisationRelationships relationships = null, ReferrerOrganisationLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ReferrerOrganisation(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ReferrerMembersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrerMembersDocument"/> instance for mocking. </returns>
        public static ReferrerMembersDocument ReferrerMembersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrerMembersDocumentLinks links = null, IEnumerable<ReferrerMember> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ReferrerMember>();
            included ??= new List<IncludedResource>();

            return new ReferrerMembersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ReferrerMember. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ReferrerMember"/> instance for mocking. </returns>
        public static ReferrerMember ReferrerMember(string type = null, string id = null, ReferrerMemberAttributes attributes = null, ReferrerMemberRelationships relationships = null, ReferrerMemberLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ReferrerMember(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAddressesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactAddressesDocument"/> instance for mocking. </returns>
        public static ContactAddressesDocument ContactAddressesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactAddressesDocumentLinks links = null, IEnumerable<ContactAddress> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactAddress>();
            included ??= new List<IncludedResource>();

            return new ContactAddressesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactAddress. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactAddress"/> instance for mocking. </returns>
        public static ContactAddress ContactAddress(string type = null, string id = null, ContactAddressAttributes attributes = null, ContactAddressRelationships relationships = null, ContactAddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactAddress(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAddressAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="addressType"></param>
        /// <param name="formattedAddress"></param>
        /// <param name="streetAddress"></param>
        /// <param name="country"></param>
        /// <param name="suburb"></param>
        /// <param name="postCode"></param>
        /// <param name="state"></param>
        /// <returns> A new <see cref="Models.ContactAddressAttributes"/> instance for mocking. </returns>
        public static ContactAddressAttributes ContactAddressAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, ContactAddressAttributesAddressType? addressType = null, string formattedAddress = null, string streetAddress = null, string country = null, string suburb = null, string postCode = null, string state = null)
        {
            return new ContactAddressAttributes(updated, created, addressType, formattedAddress, streetAddress, country, suburb, postCode, state);
        }

        /// <summary> Initializes a new instance of DealImportantDatesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealImportantDatesDocument"/> instance for mocking. </returns>
        public static DealImportantDatesDocument DealImportantDatesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealImportantDatesDocumentLinks links = null, IEnumerable<DealImportantDate> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealImportantDate>();
            included ??= new List<IncludedResource>();

            return new DealImportantDatesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealImportantDate. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealImportantDate"/> instance for mocking. </returns>
        public static DealImportantDate DealImportantDate(string type = null, string id = null, DealImportantDateAttributes attributes = null, DealImportantDateRelationships relationships = null, DealImportantDateLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealImportantDate(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealImportantDateAttributes. </summary>
        /// <param name="date"></param>
        /// <param name="dateType"></param>
        /// <returns> A new <see cref="Models.DealImportantDateAttributes"/> instance for mocking. </returns>
        public static DealImportantDateAttributes DealImportantDateAttributes(DateTimeOffset? date = null, DealImportantDateAttributesDateType? dateType = null)
        {
            return new DealImportantDateAttributes(date, dateType);
        }

        /// <summary> Initializes a new instance of DealStructuresDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealStructuresDocument"/> instance for mocking. </returns>
        public static DealStructuresDocument DealStructuresDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealStructuresDocumentLinks links = null, IEnumerable<DealStructure> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealStructure>();
            included ??= new List<IncludedResource>();

            return new DealStructuresDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealStructure. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealStructure"/> instance for mocking. </returns>
        public static DealStructure DealStructure(string type = null, string id = null, DealStructureAttributes attributes = null, DealStructureRelationships relationships = null, DealStructureLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealStructure(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealStructureAttributes. </summary>
        /// <param name="fixedRateBeginDate"></param>
        /// <param name="rateTypePeriodMonths"></param>
        /// <param name="loanStructureType"></param>
        /// <param name="interestRate"></param>
        /// <param name="amount"></param>
        /// <param name="rateType"></param>
        /// <param name="paymentAmount"></param>
        /// <param name="interestOnlyExpiryDate"></param>
        /// <param name="loanTermYears"></param>
        /// <param name="fixedRateExpiryDate"></param>
        /// <returns> A new <see cref="Models.DealStructureAttributes"/> instance for mocking. </returns>
        public static DealStructureAttributes DealStructureAttributes(DateTimeOffset? fixedRateBeginDate = null, int? rateTypePeriodMonths = null, DealStructureAttributesLoanStructureType? loanStructureType = null, double? interestRate = null, double? amount = null, string rateType = null, double? paymentAmount = null, DateTimeOffset? interestOnlyExpiryDate = null, double? loanTermYears = null, DateTimeOffset? fixedRateExpiryDate = null)
        {
            return new DealStructureAttributes(fixedRateBeginDate, rateTypePeriodMonths, loanStructureType, interestRate, amount, rateType, paymentAmount, interestOnlyExpiryDate, loanTermYears, fixedRateExpiryDate);
        }

        /// <summary> Initializes a new instance of DealNotesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealNotesDocument"/> instance for mocking. </returns>
        public static DealNotesDocument DealNotesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealNotesDocumentLinks links = null, IEnumerable<DealNote> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealNote>();
            included ??= new List<IncludedResource>();

            return new DealNotesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealSecurityTitleIdentitiesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealSecurityTitleIdentitiesDocument"/> instance for mocking. </returns>
        public static DealSecurityTitleIdentitiesDocument DealSecurityTitleIdentitiesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealSecurityTitleIdentitiesDocumentLinks links = null, IEnumerable<DealSecurityTitleIdentity> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealSecurityTitleIdentity>();
            included ??= new List<IncludedResource>();

            return new DealSecurityTitleIdentitiesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealSecurityTitleIdentity. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealSecurityTitleIdentity"/> instance for mocking. </returns>
        public static DealSecurityTitleIdentity DealSecurityTitleIdentity(string type = null, string id = null, DealSecurityTitleIdentityAttributes attributes = null, object relationships = null, DealSecurityTitleIdentityLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealSecurityTitleIdentity(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealSecurityTitleIdentityAttributes. </summary>
        /// <param name="titleIdentificationType"></param>
        /// <param name="value"></param>
        /// <returns> A new <see cref="Models.DealSecurityTitleIdentityAttributes"/> instance for mocking. </returns>
        public static DealSecurityTitleIdentityAttributes DealSecurityTitleIdentityAttributes(string titleIdentificationType = null, string value = null)
        {
            return new DealSecurityTitleIdentityAttributes(titleIdentificationType, value);
        }

        /// <summary> Initializes a new instance of DealSecurityOwnershipsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealSecurityOwnershipsDocument"/> instance for mocking. </returns>
        public static DealSecurityOwnershipsDocument DealSecurityOwnershipsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealSecurityOwnershipsDocumentLinks links = null, IEnumerable<DealSecurityOwnership> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealSecurityOwnership>();
            included ??= new List<IncludedResource>();

            return new DealSecurityOwnershipsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealSecurityOwnership. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealSecurityOwnership"/> instance for mocking. </returns>
        public static DealSecurityOwnership DealSecurityOwnership(string type = null, string id = null, DealSecurityOwnershipAttributes attributes = null, DealSecurityOwnershipRelationships relationships = null, DealSecurityOwnershipLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealSecurityOwnership(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealSecurityOwnershipAttributes. </summary>
        /// <param name="ownershipPercentage"></param>
        /// <returns> A new <see cref="Models.DealSecurityOwnershipAttributes"/> instance for mocking. </returns>
        public static DealSecurityOwnershipAttributes DealSecurityOwnershipAttributes(double? ownershipPercentage = null)
        {
            return new DealSecurityOwnershipAttributes(ownershipPercentage);
        }

        /// <summary> Initializes a new instance of LiabilitySubTypesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.LiabilitySubTypesDocument"/> instance for mocking. </returns>
        public static LiabilitySubTypesDocument LiabilitySubTypesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, LiabilitySubTypesDocumentLinks links = null, IEnumerable<LiabilitySubType> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<LiabilitySubType>();
            included ??= new List<IncludedResource>();

            return new LiabilitySubTypesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of LiabilitySubType. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.LiabilitySubType"/> instance for mocking. </returns>
        public static LiabilitySubType LiabilitySubType(string type = null, string id = null, LiabilitySubTypeAttributes attributes = null, object relationships = null, LiabilitySubTypeLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new LiabilitySubType(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of LiabilitySubTypeAttributes. </summary>
        /// <param name="name"></param>
        /// <returns> A new <see cref="Models.LiabilitySubTypeAttributes"/> instance for mocking. </returns>
        public static LiabilitySubTypeAttributes LiabilitySubTypeAttributes(string name = null)
        {
            return new LiabilitySubTypeAttributes(name);
        }

        /// <summary> Initializes a new instance of DealStructureImportantDate. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealStructureImportantDate"/> instance for mocking. </returns>
        public static DealStructureImportantDate DealStructureImportantDate(string type = null, string id = null, DealStructureImportantDateAttributes attributes = null, DealStructureImportantDateRelationships relationships = null, DealStructureImportantDateLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealStructureImportantDate(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealStructureImportantDateAttributes. </summary>
        /// <param name="startDate"></param>
        /// <param name="dateType"></param>
        /// <param name="finishDate"></param>
        /// <returns> A new <see cref="Models.DealStructureImportantDateAttributes"/> instance for mocking. </returns>
        public static DealStructureImportantDateAttributes DealStructureImportantDateAttributes(DateTimeOffset? startDate = null, DealStructureImportantDateAttributesDateType? dateType = null, DateTimeOffset? finishDate = null)
        {
            return new DealStructureImportantDateAttributes(startDate, dateType, finishDate);
        }

        /// <summary> Initializes a new instance of Financial. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"> Any object. </param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Financial"/> instance for mocking. </returns>
        public static Financial Financial(string type = null, string id = null, object attributes = null, FinancialRelationships relationships = null, FinancialLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Financial(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of HighLevelSummary. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.HighLevelSummary"/> instance for mocking. </returns>
        public static HighLevelSummary HighLevelSummary(string type = null, string id = null, HighLevelSummaryAttributes attributes = null, HighLevelSummaryRelationships relationships = null, HighLevelSummaryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new HighLevelSummary(type, id, attributes, relationships, links, meta);
        }
    }
}
