// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using MyCrmSampleClient.MyCrmApi.Models;

namespace MyCrmSampleClient.MyCrmApi
{
    internal partial class DealRelatedRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DealRelatedRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public DealRelatedRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetDealScenariosRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/dealScenario", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DealScenariosDocument>> GetDealScenariosAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealScenariosRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DealScenariosDocument value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DealScenariosDocument.DeserializeDealScenariosDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((DealScenariosDocument)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DealScenariosDocument> GetDealScenarios(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealScenariosRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DealScenariosDocument value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DealScenariosDocument.DeserializeDealScenariosDocument(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((DealScenariosDocument)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDealNotesRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/dealNotes", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<DealNotesDocument>>> GetDealNotesAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealNotesRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealNotesDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DealNotesDocument> array = new List<DealNotesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealNotesDocument.DeserializeDealNotesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealNotesDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<DealNotesDocument>> GetDealNotes(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealNotesRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealNotesDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DealNotesDocument> array = new List<DealNotesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealNotesDocument.DeserializeDealNotesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealNotesDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDealParticipantsRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/participants", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<DealParticipantsDocument>>> GetDealParticipantsAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealParticipantsRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealParticipantsDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DealParticipantsDocument> array = new List<DealParticipantsDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealParticipantsDocument.DeserializeDealParticipantsDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealParticipantsDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<DealParticipantsDocument>> GetDealParticipants(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealParticipantsRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealParticipantsDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DealParticipantsDocument> array = new List<DealParticipantsDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealParticipantsDocument.DeserializeDealParticipantsDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealParticipantsDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDealExternalReferencesRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/externalReferences", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<DealExternalReferencesDocument>>> GetDealExternalReferencesAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealExternalReferencesRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealExternalReferencesDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DealExternalReferencesDocument> array = new List<DealExternalReferencesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealExternalReferencesDocument.DeserializeDealExternalReferencesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealExternalReferencesDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<DealExternalReferencesDocument>> GetDealExternalReferences(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealExternalReferencesRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealExternalReferencesDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DealExternalReferencesDocument> array = new List<DealExternalReferencesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealExternalReferencesDocument.DeserializeDealExternalReferencesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealExternalReferencesDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetContactsRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/contacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<ContactsDocument>>> GetContactsAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetContactsRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<ContactsDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<ContactsDocument> array = new List<ContactsDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(ContactsDocument.DeserializeContactsDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<ContactsDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<ContactsDocument>> GetContacts(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetContactsRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<ContactsDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<ContactsDocument> array = new List<ContactsDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(ContactsDocument.DeserializeContactsDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<ContactsDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDealImportantDatesRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/importantDates", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<DealImportantDatesDocument>>> GetDealImportantDatesAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealImportantDatesRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealImportantDatesDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DealImportantDatesDocument> array = new List<DealImportantDatesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealImportantDatesDocument.DeserializeDealImportantDatesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealImportantDatesDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<DealImportantDatesDocument>> GetDealImportantDates(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealImportantDatesRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealImportantDatesDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DealImportantDatesDocument> array = new List<DealImportantDatesDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealImportantDatesDocument.DeserializeDealImportantDatesDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealImportantDatesDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDealStructuresRequest(int id)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/jsonapi/deals/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/dealStructures", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<DealStructuresDocument>>> GetDealStructuresAsync(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealStructuresRequest(id);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealStructuresDocument> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<DealStructuresDocument> array = new List<DealStructuresDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealStructuresDocument.DeserializeDealStructuresDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealStructuresDocument>)null, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<DealStructuresDocument>> GetDealStructures(int id, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetDealStructuresRequest(id);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<DealStructuresDocument> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<DealStructuresDocument> array = new List<DealStructuresDocument>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(DealStructuresDocument.DeserializeDealStructuresDocument(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                case 401:
                    return Response.FromValue((IReadOnlyList<DealStructuresDocument>)null, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
