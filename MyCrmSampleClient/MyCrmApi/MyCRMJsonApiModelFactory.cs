// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace MyCrmSampleClient.MyCrmApi.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class MyCRMJsonApiModelFactory
    {
        /// <summary> Initializes a new instance of ContactExternalReferencesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactExternalReferencesDocument"/> instance for mocking. </returns>
        public static ContactExternalReferencesDocument ContactExternalReferencesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactExternalReferencesDocumentLinks links = null, IEnumerable<ContactExternalReference> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactExternalReference>();
            included ??= new List<IncludedResource>();

            return new ContactExternalReferencesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of TopLevelLinks. </summary>
        /// <param name="self"></param>
        /// <param name="related"></param>
        /// <param name="describedBy"></param>
        /// <param name="first"></param>
        /// <param name="last"></param>
        /// <param name="prev"></param>
        /// <param name="next"></param>
        /// <returns> A new <see cref="Models.TopLevelLinks"/> instance for mocking. </returns>
        public static TopLevelLinks TopLevelLinks(string self = null, string related = null, string describedBy = null, string first = null, string last = null, string prev = null, string next = null)
        {
            return new TopLevelLinks(self, related, describedBy, first, last, prev, next);
        }

        /// <summary> Initializes a new instance of ContactExternalReference. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactExternalReference"/> instance for mocking. </returns>
        public static ContactExternalReference ContactExternalReference(string type = null, string id = null, ContactExternalReferenceAttributes attributes = null, ContactExternalReferenceRelationships relationships = null, ContactExternalReferenceLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactExternalReference(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of RelationshipsSingleDocument. </summary>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.RelationshipsSingleDocument"/> instance for mocking. </returns>
        public static RelationshipsSingleDocument RelationshipsSingleDocument(RelationshipsSingleDocumentLinks links = null, IReadOnlyDictionary<string, object> meta = null, ResourceIdentifier data = null)
        {
            meta ??= new Dictionary<string, object>();

            return new RelationshipsSingleDocument(links, meta, data);
        }

        /// <summary> Initializes a new instance of RelationshipLinks. </summary>
        /// <param name="self"></param>
        /// <param name="related"></param>
        /// <returns> A new <see cref="Models.RelationshipLinks"/> instance for mocking. </returns>
        public static RelationshipLinks RelationshipLinks(string self = null, string related = null)
        {
            return new RelationshipLinks(self, related);
        }

        /// <summary> Initializes a new instance of ResourceLinks. </summary>
        /// <param name="self"></param>
        /// <returns> A new <see cref="Models.ResourceLinks"/> instance for mocking. </returns>
        public static ResourceLinks ResourceLinks(string self = null)
        {
            return new ResourceLinks(self);
        }

        /// <summary> Initializes a new instance of ContactExternalReferenceDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactExternalReferenceDocument"/> instance for mocking. </returns>
        public static ContactExternalReferenceDocument ContactExternalReferenceDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactExternalReferenceDocumentLinks links = null, ContactExternalReference data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactExternalReferenceDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactsDocument"/> instance for mocking. </returns>
        public static ContactsDocument ContactsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactsDocumentLinks links = null, IEnumerable<Contact> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Contact>();
            included ??= new List<IncludedResource>();

            return new ContactsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Contact. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Contact"/> instance for mocking. </returns>
        public static Contact Contact(string type = null, string id = null, ContactAttributes attributes = null, ContactRelationships relationships = null, ContactLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Contact(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAttributes. </summary>
        /// <param name="created"></param>
        /// <param name="mobile"></param>
        /// <param name="title"></param>
        /// <param name="firstName"></param>
        /// <param name="middleName"></param>
        /// <param name="lastName"></param>
        /// <param name="preferredName"></param>
        /// <param name="email"></param>
        /// <param name="updated"></param>
        /// <param name="hasMarketingConsent"></param>
        /// <param name="dateOfBirth"></param>
        /// <returns> A new <see cref="Models.ContactAttributes"/> instance for mocking. </returns>
        public static ContactAttributes ContactAttributes(DateTimeOffset? created = null, string mobile = null, string title = null, string firstName = null, string middleName = null, string lastName = null, string preferredName = null, string email = null, DateTimeOffset? updated = null, bool? hasMarketingConsent = null, DateTimeOffset? dateOfBirth = null)
        {
            return new ContactAttributes(created, mobile, title, firstName, middleName, lastName, preferredName, email, updated, hasMarketingConsent, dateOfBirth);
        }

        /// <summary> Initializes a new instance of RelationshipsMultipleDocument. </summary>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="data"></param>
        /// <returns> A new <see cref="Models.RelationshipsMultipleDocument"/> instance for mocking. </returns>
        public static RelationshipsMultipleDocument RelationshipsMultipleDocument(RelationshipsMultipleDocumentLinks links = null, IReadOnlyDictionary<string, object> meta = null, IEnumerable<ResourceIdentifier> data = null)
        {
            meta ??= new Dictionary<string, object>();
            data ??= new List<ResourceIdentifier>();

            return new RelationshipsMultipleDocument(links, meta, data?.ToList());
        }

        /// <summary> Initializes a new instance of ContactGroupsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupsDocument"/> instance for mocking. </returns>
        public static ContactGroupsDocument ContactGroupsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupsDocumentLinks links = null, IEnumerable<ContactGroup> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactGroup>();
            included ??= new List<IncludedResource>();

            return new ContactGroupsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactGroup. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactGroup"/> instance for mocking. </returns>
        public static ContactGroup ContactGroup(string type = null, string id = null, ContactGroupAttributes attributes = null, ContactGroupRelationships relationships = null, ContactGroupLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactGroup(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactGroupAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="utmSource"></param>
        /// <param name="utmMedium"></param>
        /// <param name="utmTerm"></param>
        /// <param name="utmContent"></param>
        /// <param name="utmCampaign"></param>
        /// <param name="notes"></param>
        /// <returns> A new <see cref="Models.ContactGroupAttributes"/> instance for mocking. </returns>
        public static ContactGroupAttributes ContactGroupAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string utmSource = null, string utmMedium = null, string utmTerm = null, string utmContent = null, string utmCampaign = null, string notes = null)
        {
            return new ContactGroupAttributes(updated, created, utmSource, utmMedium, utmTerm, utmContent, utmCampaign, notes);
        }

        /// <summary> Initializes a new instance of ContactGroupDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupDocument"/> instance for mocking. </returns>
        public static ContactGroupDocument ContactGroupDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupDocumentLinks links = null, ContactGroup data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactGroupDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactMarketing. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactMarketing"/> instance for mocking. </returns>
        public static ContactMarketing ContactMarketing(string type = null, string id = null, ContactMarketingAttributes attributes = null, object relationships = null, ContactMarketingLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactMarketing(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactMarketingAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="hasMarketingConsent"></param>
        /// <returns> A new <see cref="Models.ContactMarketingAttributes"/> instance for mocking. </returns>
        public static ContactMarketingAttributes ContactMarketingAttributes(DateTimeOffset? updated = null, bool? hasMarketingConsent = null)
        {
            return new ContactMarketingAttributes(updated, hasMarketingConsent);
        }

        /// <summary> Initializes a new instance of ContactDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactDocument"/> instance for mocking. </returns>
        public static ContactDocument ContactDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactDocumentLinks links = null, Contact data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealsDocument"/> instance for mocking. </returns>
        public static DealsDocument DealsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealsDocumentLinks links = null, IEnumerable<Deal> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Deal>();
            included ??= new List<IncludedResource>();

            return new DealsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Deal. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Deal"/> instance for mocking. </returns>
        public static Deal Deal(string type = null, string id = null, DealAttributes attributes = null, DealRelationships relationships = null, DealLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Deal(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="dealTypeId"></param>
        /// <param name="customStatusName"></param>
        /// <param name="name"></param>
        /// <param name="dealStatus"></param>
        /// <param name="opportunity"> Anything. </param>
        /// <returns> A new <see cref="Models.DealAttributes"/> instance for mocking. </returns>
        public static DealAttributes DealAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, LoanAppLendingCategory? dealTypeId = null, string customStatusName = null, string name = null, SystemStatus? dealStatus = null, object opportunity = null)
        {
            return new DealAttributes(updated, created, dealTypeId, customStatusName, name, dealStatus, opportunity);
        }

        /// <summary> Initializes a new instance of DealExternalReferencesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealExternalReferencesDocument"/> instance for mocking. </returns>
        public static DealExternalReferencesDocument DealExternalReferencesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealExternalReferencesDocumentLinks links = null, IEnumerable<DealExternalReference> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealExternalReference>();
            included ??= new List<IncludedResource>();

            return new DealExternalReferencesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealExternalReference. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealExternalReference"/> instance for mocking. </returns>
        public static DealExternalReference DealExternalReference(string type = null, string id = null, DealExternalReferenceAttributes attributes = null, DealExternalReferenceRelationships relationships = null, DealExternalReferenceLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealExternalReference(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealExternalReferenceDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealExternalReferenceDocument"/> instance for mocking. </returns>
        public static DealExternalReferenceDocument DealExternalReferenceDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealExternalReferenceDocumentLinks links = null, DealExternalReference data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealExternalReferenceDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealParticipantsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealParticipantsDocument"/> instance for mocking. </returns>
        public static DealParticipantsDocument DealParticipantsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealParticipantsDocumentLinks links = null, IEnumerable<DealParticipant> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealParticipant>();
            included ??= new List<IncludedResource>();

            return new DealParticipantsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealParticipant. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealParticipant"/> instance for mocking. </returns>
        public static DealParticipant DealParticipant(string type = null, string id = null, DealParticipantAttributes attributes = null, DealParticipantRelationships relationships = null, DealParticipantLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealParticipant(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealParticipantAttributes. </summary>
        /// <param name="detail"></param>
        /// <param name="created"></param>
        /// <param name="isAccountant"></param>
        /// <param name="isSolicitor"></param>
        /// <param name="isApplicant"></param>
        /// <param name="isGuarantor"></param>
        /// <param name="isDependent"></param>
        /// <param name="isAssetSupplier"></param>
        /// <param name="isClientSoleTrader"></param>
        /// <param name="updated"></param>
        /// <returns> A new <see cref="Models.DealParticipantAttributes"/> instance for mocking. </returns>
        public static DealParticipantAttributes DealParticipantAttributes(string detail = null, DateTimeOffset? created = null, bool? isAccountant = null, bool? isSolicitor = null, bool? isApplicant = null, bool? isGuarantor = null, bool? isDependent = null, bool? isAssetSupplier = null, bool? isClientSoleTrader = null, DateTimeOffset? updated = null)
        {
            return new DealParticipantAttributes(detail, created, isAccountant, isSolicitor, isApplicant, isGuarantor, isDependent, isAssetSupplier, isClientSoleTrader, updated);
        }

        /// <summary> Initializes a new instance of DealParticipantDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealParticipantDocument"/> instance for mocking. </returns>
        public static DealParticipantDocument DealParticipantDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealParticipantDocumentLinks links = null, DealParticipant data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealParticipantDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of DealScenariosDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealScenariosDocument"/> instance for mocking. </returns>
        public static DealScenariosDocument DealScenariosDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealScenariosDocumentLinks links = null, IEnumerable<DealScenario> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealScenario>();
            included ??= new List<IncludedResource>();

            return new DealScenariosDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealScenario. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"> Any object. </param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealScenario"/> instance for mocking. </returns>
        public static DealScenario DealScenario(string type = null, string id = null, object attributes = null, DealScenarioRelationships relationships = null, DealScenarioLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealScenario(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealDocument"/> instance for mocking. </returns>
        public static DealDocument DealDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealDocumentLinks links = null, Deal data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new DealDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of IntegrationsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IntegrationsDocument"/> instance for mocking. </returns>
        public static IntegrationsDocument IntegrationsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IntegrationsDocumentLinks links = null, IEnumerable<Integration> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Integration>();
            included ??= new List<IncludedResource>();

            return new IntegrationsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Integration. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Integration"/> instance for mocking. </returns>
        public static Integration Integration(string type = null, string id = null, IntegrationAttributes attributes = null, IntegrationRelationships relationships = null, IntegrationLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Integration(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of IntegrationAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <returns> A new <see cref="Models.IntegrationAttributes"/> instance for mocking. </returns>
        public static IntegrationAttributes IntegrationAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null, string name = null, string description = null)
        {
            return new IntegrationAttributes(updated, created, name, description);
        }

        /// <summary> Initializes a new instance of IntegrationDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.IntegrationDocument"/> instance for mocking. </returns>
        public static IntegrationDocument IntegrationDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, IntegrationDocumentLinks links = null, Integration data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new IntegrationDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of Lead. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Lead"/> instance for mocking. </returns>
        public static Lead Lead(string type = null, string id = null, LeadAttributes attributes = null, object relationships = null, LeadLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Lead(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactGroupReferrersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupReferrersDocument"/> instance for mocking. </returns>
        public static ContactGroupReferrersDocument ContactGroupReferrersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupReferrersDocumentLinks links = null, IEnumerable<ContactGroupReferrer> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactGroupReferrer>();
            included ??= new List<IncludedResource>();

            return new ContactGroupReferrersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactGroupReferrer. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"> Any object. </param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactGroupReferrer"/> instance for mocking. </returns>
        public static ContactGroupReferrer ContactGroupReferrer(string type = null, string id = null, ContactGroupReferrerAttributes attributes = null, object relationships = null, ContactGroupReferrerLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactGroupReferrer(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactGroupReferrerAttributes. </summary>
        /// <param name="referrerOrganizationName"></param>
        /// <param name="referrerName"></param>
        /// <returns> A new <see cref="Models.ContactGroupReferrerAttributes"/> instance for mocking. </returns>
        public static ContactGroupReferrerAttributes ContactGroupReferrerAttributes(string referrerOrganizationName = null, string referrerName = null)
        {
            return new ContactGroupReferrerAttributes(referrerOrganizationName, referrerName);
        }

        /// <summary> Initializes a new instance of ContactGroupReferrerDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactGroupReferrerDocument"/> instance for mocking. </returns>
        public static ContactGroupReferrerDocument ContactGroupReferrerDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactGroupReferrerDocumentLinks links = null, ContactGroupReferrer data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            included ??= new List<IncludedResource>();

            return new ContactGroupReferrerDocument(meta, jsonApi, links, data, included?.ToList());
        }

        /// <summary> Initializes a new instance of AdvisersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.AdvisersDocument"/> instance for mocking. </returns>
        public static AdvisersDocument AdvisersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, AdvisersDocumentLinks links = null, IEnumerable<Adviser> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Adviser>();
            included ??= new List<IncludedResource>();

            return new AdvisersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Adviser. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"> Any object. </param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Adviser"/> instance for mocking. </returns>
        public static Adviser Adviser(string type = null, string id = null, object attributes = null, AdviserRelationships relationships = null, AdviserLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Adviser(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ReferrerOrganizationsDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrerOrganizationsDocument"/> instance for mocking. </returns>
        public static ReferrerOrganizationsDocument ReferrerOrganizationsDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrerOrganizationsDocumentLinks links = null, IEnumerable<ReferrerOrganization> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ReferrerOrganization>();
            included ??= new List<IncludedResource>();

            return new ReferrerOrganizationsDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ReferrerOrganization. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ReferrerOrganization"/> instance for mocking. </returns>
        public static ReferrerOrganization ReferrerOrganization(string type = null, string id = null, ReferrerOrganizationAttributes attributes = null, ReferrerOrganizationRelationships relationships = null, ReferrerOrganizationLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ReferrerOrganization(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ReferrersDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ReferrersDocument"/> instance for mocking. </returns>
        public static ReferrersDocument ReferrersDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ReferrersDocumentLinks links = null, IEnumerable<Referrer> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<Referrer>();
            included ??= new List<IncludedResource>();

            return new ReferrersDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of Referrer. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Referrer"/> instance for mocking. </returns>
        public static Referrer Referrer(string type = null, string id = null, ReferrerAttributes attributes = null, ReferrerRelationships relationships = null, ReferrerLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Referrer(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAddressesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.ContactAddressesDocument"/> instance for mocking. </returns>
        public static ContactAddressesDocument ContactAddressesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, ContactAddressesDocumentLinks links = null, IEnumerable<ContactAddress> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<ContactAddress>();
            included ??= new List<IncludedResource>();

            return new ContactAddressesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of ContactAddress. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"> Any object. </param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactAddress"/> instance for mocking. </returns>
        public static ContactAddress ContactAddress(string type = null, string id = null, object attributes = null, ContactAddressRelationships relationships = null, ContactAddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactAddress(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealNotesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealNotesDocument"/> instance for mocking. </returns>
        public static DealNotesDocument DealNotesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealNotesDocumentLinks links = null, IEnumerable<DealNote> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealNote>();
            included ??= new List<IncludedResource>();

            return new DealNotesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealNote. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealNote"/> instance for mocking. </returns>
        public static DealNote DealNote(string type = null, string id = null, DealNoteAttributes attributes = null, DealNoteRelationships relationships = null, DealNoteLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealNote(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealNoteAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <returns> A new <see cref="Models.DealNoteAttributes"/> instance for mocking. </returns>
        public static DealNoteAttributes DealNoteAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null)
        {
            return new DealNoteAttributes(updated, created);
        }

        /// <summary> Initializes a new instance of DealImportantDatesDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealImportantDatesDocument"/> instance for mocking. </returns>
        public static DealImportantDatesDocument DealImportantDatesDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealImportantDatesDocumentLinks links = null, IEnumerable<DealImportantDate> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealImportantDate>();
            included ??= new List<IncludedResource>();

            return new DealImportantDatesDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealImportantDate. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealImportantDate"/> instance for mocking. </returns>
        public static DealImportantDate DealImportantDate(string type = null, string id = null, DealImportantDateAttributes attributes = null, DealImportantDateRelationships relationships = null, DealImportantDateLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealImportantDate(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealImportantDateAttributes. </summary>
        /// <param name="date"></param>
        /// <param name="dateType"></param>
        /// <returns> A new <see cref="Models.DealImportantDateAttributes"/> instance for mocking. </returns>
        public static DealImportantDateAttributes DealImportantDateAttributes(DateTimeOffset? date = null, ImportantDate? dateType = null)
        {
            return new DealImportantDateAttributes(date, dateType);
        }

        /// <summary> Initializes a new instance of DealStructuresDocument. </summary>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <param name="jsonApi"> Dictionary of &lt;any&gt;. </param>
        /// <param name="links"></param>
        /// <param name="data"></param>
        /// <param name="included"></param>
        /// <returns> A new <see cref="Models.DealStructuresDocument"/> instance for mocking. </returns>
        public static DealStructuresDocument DealStructuresDocument(IReadOnlyDictionary<string, object> meta = null, IReadOnlyDictionary<string, object> jsonApi = null, DealStructuresDocumentLinks links = null, IEnumerable<DealStructure> data = null, IEnumerable<IncludedResource> included = null)
        {
            meta ??= new Dictionary<string, object>();
            jsonApi ??= new Dictionary<string, object>();
            data ??= new List<DealStructure>();
            included ??= new List<IncludedResource>();

            return new DealStructuresDocument(meta, jsonApi, links, data?.ToList(), included?.ToList());
        }

        /// <summary> Initializes a new instance of DealStructure. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealStructure"/> instance for mocking. </returns>
        public static DealStructure DealStructure(string type = null, string id = null, DealStructureAttributes attributes = null, DealStructureRelationships relationships = null, DealStructureLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealStructure(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealStructureAttributes. </summary>
        /// <param name="fixedRateExpiryDate"></param>
        /// <param name="fixedRateBeginDate"></param>
        /// <returns> A new <see cref="Models.DealStructureAttributes"/> instance for mocking. </returns>
        public static DealStructureAttributes DealStructureAttributes(DateTimeOffset? fixedRateExpiryDate = null, DateTimeOffset? fixedRateBeginDate = null)
        {
            return new DealStructureAttributes(fixedRateExpiryDate, fixedRateBeginDate);
        }

        /// <summary> Initializes a new instance of Address. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.Address"/> instance for mocking. </returns>
        public static Address Address(string type = null, string id = null, AddressAttributes attributes = null, AddressRelationships relationships = null, AddressLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new Address(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAddressDetail. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.ContactAddressDetail"/> instance for mocking. </returns>
        public static ContactAddressDetail ContactAddressDetail(string type = null, string id = null, ContactAddressDetailAttributes attributes = null, ContactAddressDetailRelationships relationships = null, ContactAddressDetailLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new ContactAddressDetail(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of ContactAddressDetailAttributes. </summary>
        /// <param name="updated"></param>
        /// <param name="created"></param>
        /// <returns> A new <see cref="Models.ContactAddressDetailAttributes"/> instance for mocking. </returns>
        public static ContactAddressDetailAttributes ContactAddressDetailAttributes(DateTimeOffset? updated = null, DateTimeOffset? created = null)
        {
            return new ContactAddressDetailAttributes(updated, created);
        }

        /// <summary> Initializes a new instance of DealStructureImportantDate. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.DealStructureImportantDate"/> instance for mocking. </returns>
        public static DealStructureImportantDate DealStructureImportantDate(string type = null, string id = null, DealStructureImportantDateAttributes attributes = null, DealStructureImportantDateRelationships relationships = null, DealStructureImportantDateLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new DealStructureImportantDate(type, id, attributes, relationships, links, meta);
        }

        /// <summary> Initializes a new instance of DealStructureImportantDateAttributes. </summary>
        /// <param name="finishDate"></param>
        /// <param name="startDate"></param>
        /// <param name="dateType"></param>
        /// <returns> A new <see cref="Models.DealStructureImportantDateAttributes"/> instance for mocking. </returns>
        public static DealStructureImportantDateAttributes DealStructureImportantDateAttributes(DateTimeOffset? finishDate = null, DateTimeOffset? startDate = null, LoanStructureImportantDateTypes? dateType = null)
        {
            return new DealStructureImportantDateAttributes(finishDate, startDate, dateType);
        }

        /// <summary> Initializes a new instance of HighLevelSummary. </summary>
        /// <param name="type"></param>
        /// <param name="id"></param>
        /// <param name="attributes"></param>
        /// <param name="relationships"></param>
        /// <param name="links"></param>
        /// <param name="meta"> Dictionary of &lt;any&gt;. </param>
        /// <returns> A new <see cref="Models.HighLevelSummary"/> instance for mocking. </returns>
        public static HighLevelSummary HighLevelSummary(string type = null, string id = null, HighLevelSummaryAttributes attributes = null, HighLevelSummaryRelationships relationships = null, HighLevelSummaryLinks links = null, IReadOnlyDictionary<string, object> meta = null)
        {
            meta ??= new Dictionary<string, object>();

            return new HighLevelSummary(type, id, attributes, relationships, links, meta);
        }
    }
}
