// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace MyCrmSampleClient.MyCrmApi
{
    /// <summary> The ContactGroupRelationship service client. </summary>
    public partial class ContactGroupRelationshipClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ContactGroupRelationshipClient for mocking. </summary>
        protected ContactGroupRelationshipClient()
        {
        }

        /// <summary> Initializes a new instance of ContactGroupRelationshipClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ContactGroupRelationshipClient(Uri endpoint = null, MyCRMAPIClientOptions options = null)
        {
            endpoint ??= new Uri("");
            options ??= new MyCRMAPIClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string,
        ///       id: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetBusinessesAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBusinessesRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string,
        ///       id: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetBusinesses(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBusinessesRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostBusinessesAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostBusinessesRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostBusinesses(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostBusinessesRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchBusinessesAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchBusinessesRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchBusinesses(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchBusinessesRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteBusinessesAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessesRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteBusinesses(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteBusinesses");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteBusinessesRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string,
        ///       id: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetContactsAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetContactsRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string,
        ///       id: string
        ///     }
        ///   ]
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetContacts(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetContactsRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostContactsAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostContactsRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostContacts(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostContactsRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchContactsAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchContactsRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: [
        ///     {
        ///       type: string (required),
        ///       id: string
        ///     }
        ///   ] (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchContacts(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchContactsRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteContactsAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteContactsRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteContacts(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteContacts");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteContactsRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetAdvisersAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdvisersRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetAdvisers(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetAdvisersRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostAdvisersAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostAdvisersRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostAdvisers(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostAdvisersRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchAdvisersAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchAdvisersRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchAdvisers(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchAdvisersRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteAdvisersAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAdvisersRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteAdvisers(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteAdvisers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteAdvisersRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetReferrerOrganisationsAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferrerOrganisationsRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetReferrerOrganisations(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferrerOrganisationsRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostReferrerOrganisationsAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostReferrerOrganisationsRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostReferrerOrganisations(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostReferrerOrganisationsRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchReferrerOrganisationsAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchReferrerOrganisationsRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchReferrerOrganisations(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchReferrerOrganisationsRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteReferrerOrganisationsAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReferrerOrganisationsRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteReferrerOrganisations(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteReferrerOrganisations");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReferrerOrganisationsRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetReferrersAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferrersRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string,
        ///     id: string
        ///   }
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetReferrers(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.GetReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetReferrersRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PostReferrersAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostReferrersRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the primary contact group resource. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PostReferrers(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PostReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePostReferrersRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> PatchReferrersAsync(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchReferrersRequest(id, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   links: {
        ///     self: string,
        ///     related: string
        ///   },
        ///   meta: Dictionary&lt;string, object&gt;,
        ///   data: {
        ///     type: string (required),
        ///     id: string
        ///   } (required)
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response PatchReferrers(int id, RequestContent content, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.PatchReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePatchReferrersRequest(id, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> DeleteReferrersAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReferrersRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Where `id` is the identifier of the contact group. </summary>
        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   errors: [
        ///     {
        ///       id: string,
        ///       links: {
        ///         about: string
        ///       },
        ///       status: string,
        ///       code: string,
        ///       title: string,
        ///       detail: string,
        ///       source: {
        ///         pointer: string,
        ///         parameter: string
        ///       },
        ///       meta: {
        ///         data: Dictionary&lt;string, object&gt;
        ///       }
        ///     }
        ///   ]
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response DeleteReferrers(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("ContactGroupRelationshipClient.DeleteReferrers");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteReferrersRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetBusinessesRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200401);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/businesses", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreatePostBusinessesRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/businesses", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePatchBusinessesRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/businesses", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteBusinessesRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204401);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/businesses", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreateGetContactsRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200401);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/contacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreatePostContactsRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/contacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePatchContactsRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/contacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteContactsRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204401);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/contacts", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreateGetAdvisersRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200401);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/adviser", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreatePostAdvisersRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/adviser", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePatchAdvisersRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/adviser", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteAdvisersRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204401);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/adviser", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreateGetReferrerOrganisationsRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200401);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrerOrganisation", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreatePostReferrerOrganisationsRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrerOrganisation", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePatchReferrerOrganisationsRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrerOrganisation", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteReferrerOrganisationsRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204401);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrerOrganisation", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreateGetReferrersRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200401);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        internal HttpMessage CreatePostReferrersRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreatePatchReferrersRequest(int id, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200204401);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            request.Headers.Add("Content-Type", "application/vnd.api+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteReferrersRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204401);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jsonapi/contact-groups/", false);
            uri.AppendPath(id, true);
            uri.AppendPath("/relationships/referrer", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/vnd.api+json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200401;
        private static ResponseClassifier ResponseClassifier200401 => _responseClassifier200401 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 401 });
        private static ResponseClassifier _responseClassifier200204401;
        private static ResponseClassifier ResponseClassifier200204401 => _responseClassifier200204401 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 204, 401 });
        private static ResponseClassifier _responseClassifier204401;
        private static ResponseClassifier ResponseClassifier204401 => _responseClassifier204401 ??= new StatusCodeClassifier(stackalloc ushort[] { 204, 401 });
    }
}
